---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: dash0operatorconfigurations.operator.dash0.com
spec:
  group: operator.dash0.com
  names:
    kind: Dash0OperatorConfiguration
    listKind: Dash0OperatorConfigurationList
    plural: dash0operatorconfigurations
    singular: dash0operatorconfiguration
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Dash0OperatorConfiguration is the schema for the Dash0OperatorConfiguration
          API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: Dash0OperatorConfigurationSpec describes cluster-wide configuration
              settings for the Dash0 Kubernetes operator.
            properties:
              export:
                description: |-
                  The configuration of the default observability backend to which telemetry data will be sent by the operator, as
                  well as the backend that will receive the operator's self-monitoring data. This property is mandatory.
                  This can either be Dash0 or another OTLP-compatible backend. You can also combine up to three exporters (i.e.
                  Dash0 plus gRPC plus HTTP). This allows sending the same data to two or three targets simultaneously. At least
                  one exporter has to be defined.


                  Please note that self-monitoring data is only sent to one backend, with Dash0 taking precedence over gRPC and
                  HTTP, and gRPC taking precedence over HTTP if multiple exports are defined. Furthermore, HTTP export with JSON
                  encoding is not supported for self-monitoring telemetry.
                minProperties: 1
                properties:
                  dash0:
                    description: The configuration of the Dash0 ingress endpoint to
                      which telemetry data will be sent.
                    properties:
                      authorization:
                        description: Mandatory authorization settings for sending
                          data to Dash0.
                        maxProperties: 1
                        minProperties: 1
                        properties:
                          secretRef:
                            description: |-
                              A reference to a Kubernetes secret containing the Dash0 authorization token. This property is optional, and is
                              ignored if the token property is set. The authorization token for your Dash0 organization can be copied from
                              https://app.dash0.com/settings.
                            properties:
                              key:
                                default: token
                                description: The key of the value which contains the
                                  Dash0 authorization token. Defaults to "token"
                                type: string
                              name:
                                default: dash0-authorization-secret
                                description: The name of the secret containing the
                                  Dash0 authorization token. Defaults to "dash0-authorization-secret".
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          token:
                            description: |-
                              The Dash0 authorization token. This property is optional, but either this property or the SecretRef property has
                              to be provided. If both are provided, the token will be used and SecretRef will be ignored. The authorization
                              token for your Dash0 organization can be copied from https://app.dash0.com/settings.
                            type: string
                        type: object
                      dataset:
                        default: default
                        description: |-
                          The name of the Dash0 dataset to which telemetry data will be sent. This property is optional. If omitted, the
                          dataset "default" will be used.
                        type: string
                      endpoint:
                        description: |-
                          The URL of the Dash0 ingress endpoint to which telemetry data will be sent. This property is mandatory. The value
                          needs to be the OTLP/gRPC endpoint of your Dash0 organization. The correct OTLP/gRPC endpoint can be copied fom
                          https://app.dash0.com/settings. The correct endpoint value will always start with `ingress.` and end in
                          `dash0.com:4317`.
                        type: string
                    required:
                    - authorization
                    - endpoint
                    type: object
                  grpc:
                    description: The settings for an exporter to send telemetry to
                      an arbitrary OTLP-compatible receiver via gRPC.
                    properties:
                      endpoint:
                        description: The URL of the OTLP-compatible receiver to which
                          telemetry data will be sent. This property is mandatory.
                        type: string
                      headers:
                        description: Additional headers to be sent with each gRPC
                          request, for example for authorization. This property is
                          optional.
                        items:
                          properties:
                            name:
                              type: string
                            value:
                              type: string
                          required:
                          - name
                          - value
                          type: object
                        type: array
                    required:
                    - endpoint
                    type: object
                  http:
                    description: The settings for an exporter to send telemetry to
                      an arbitrary OTLP-compatible receiver via HTTP.
                    properties:
                      encoding:
                        default: proto
                        description: The encoding of the OTLP data when sent via HTTP.
                          Can be either proto or json, defaults to proto.
                        enum:
                        - proto
                        - json
                        type: string
                      endpoint:
                        description: The URL of the OTLP-compatible receiver to which
                          telemetry data will be sent. This property is mandatory.
                        type: string
                      headers:
                        description: Additional headers to be sent with each HTTP
                          request, for example for authorization. This property is
                          optional.
                        items:
                          properties:
                            name:
                              type: string
                            value:
                              type: string
                          required:
                          - name
                          - value
                          type: object
                        type: array
                    required:
                    - endpoint
                    type: object
                type: object
              selfMonitoring:
                default:
                  enabled: true
                description: Global opt-out for self-monitoring for this operator
                properties:
                  enabled:
                    default: true
                    type: boolean
                required:
                - enabled
                type: object
            type: object
          status:
            description: Dash0OperatorConfigurationStatus defines the observed state
              of the Dash0 operator configuration resource.
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
