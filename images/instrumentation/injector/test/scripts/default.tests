# SPDX-FileCopyrightText: Copyright 2024 Dash0 Inc.
# SPDX-License-Identifier: Apache-2.0

# Unrelated env vars
run_test_case \
  "getenv: returns undefined for non-existing environment variable" \
  "app" \
  "node index.js non-existing" \
  "DOES_NOT_EXIST: -"
run_test_case \
  "getenv: returns environment variable unchanged" \
  "app" \
  "node index.js existing" \
  "TEST_VAR: value" \
  "TEST_VAR=value "

# NODE_OPTIONS
run_test_case \
  "getenv: overrides NODE_OPTIONS if it is not present" \
  "app" \
  "node index.js node_options" \
  "NODE_OPTIONS: --require /__dash0__/instrumentation/node.js/node_modules/@dash0/opentelemetry"
run_test_case \
  "getenv: ask for NODE_OPTIONS (unset) twice" \
  "app" \
  "node index.js node_options_twice" \
  "NODE_OPTIONS: --require /__dash0__/instrumentation/node.js/node_modules/@dash0/opentelemetry; NODE_OPTIONS: --require /__dash0__/instrumentation/node.js/node_modules/@dash0/opentelemetry"
run_test_case \
  "getenv: prepends to NODE_OPTIONS if it is present" \
  "app" \
  "node index.js node_options" \
  "NODE_OPTIONS: --require /__dash0__/instrumentation/node.js/node_modules/@dash0/opentelemetry --no-deprecation" \
  "NODE_OPTIONS=--no-deprecation"
run_test_case \
  "getenv: ask for NODE_OPTIONS (set) twice" \
  "app" \
  "node index.js node_options_twice" \
  "NODE_OPTIONS: --require /__dash0__/instrumentation/node.js/node_modules/@dash0/opentelemetry --no-deprecation; NODE_OPTIONS: --require /__dash0__/instrumentation/node.js/node_modules/@dash0/opentelemetry --no-deprecation" \
  "NODE_OPTIONS=--no-deprecation"

# JAVA_TOOL_OPTIONS
run_test_case \
  "getenv: adds JAVA_TOOL_OPTIONS if the Java agent is present" \
  "app" \
  "node index.js java_tool_options" \
  "JAVA_TOOL_OPTIONS: -javaagent:/__dash0__/instrumentation/jvm/opentelemetry-javaagent.jar"
run_test_case \
  "getenv: adds the -javaagent to existing JAVA_TOOL_OPTIONS" \
  "app" \
  "node index.js java_tool_options" \
  "JAVA_TOOL_OPTIONS: -some-option -javaagent:/__dash0__/instrumentation/jvm/opentelemetry-javaagent.jar" \
  "JAVA_TOOL_OPTIONS=-some-option"

# OTEL_RESOURCE_ATTRIBUTES
run_test_case \
  "getenv: sets k8s.pod.uid and k8s.container.name via OTEL_RESOURCE_ATTRIBUTES" \
  "app" \
  "node index.js otel_resource_attributes" \
  "OTEL_RESOURCE_ATTRIBUTES: k8s.namespace.name=my-namespace,k8s.pod.name=my-pod,k8s.pod.uid=275ecb36-5aa8-4c2a-9c47-d8bb681b9aff,k8s.container.name=test-app"
run_test_case \
  "getenv: sets k8s.pod.uid and k8s.container.name via OTEL_RESOURCE_ATTRIBUTES with pre-existing value" \
  "app" \
  "node index.js otel_resource_attributes" \
  "OTEL_RESOURCE_ATTRIBUTES: foo=bar,k8s.namespace.name=my-namespace,k8s.pod.name=my-pod,k8s.pod.uid=275ecb36-5aa8-4c2a-9c47-d8bb681b9aff,k8s.container.name=test-app" \
  "OTEL_RESOURCE_ATTRIBUTES=foo=bar"
run_test_case \
  "getenv: use mapped app.kubernetes.io labels for service.name and friends" \
  "app" \
  "node index.js otel_resource_attributes" \
  "OTEL_RESOURCE_ATTRIBUTES: k8s.namespace.name=my-namespace,k8s.pod.name=my-pod,k8s.pod.uid=275ecb36-5aa8-4c2a-9c47-d8bb681b9aff,k8s.container.name=test-app,service.name=service-name,service.version=service-version,service.namespace=service-namespace" \
  "DASH0_SERVICE_NAME=service-name DASH0_SERVICE_VERSION=service-version DASH0_SERVICE_NAMESPACE=service-namespace"
run_test_case \
  "getenv: use mapped resource.opentelemetry.io labels as additional resource attributes" \
  "app" \
  "node index.js otel_resource_attributes" \
  "OTEL_RESOURCE_ATTRIBUTES: aaa=bbb,ccc=ddd,k8s.namespace.name=my-namespace,k8s.pod.name=my-pod,k8s.pod.uid=275ecb36-5aa8-4c2a-9c47-d8bb681b9aff,k8s.container.name=test-app" \
  "DASH0_RESOURCE_ATTRIBUTES=aaa=bbb,ccc=ddd"
run_test_case \
  "getenv: attributes set via DASH0_RESOURCE_ATTRIBUTES do not get overwritten" \
  "app" \
  "node index.js otel_resource_attributes" \
  "OTEL_RESOURCE_ATTRIBUTES: k8s.pod.uid=1234,aaa=bbb,ccc=ddd,k8s.namespace.name=my-namespace,k8s.pod.name=my-pod,k8s.container.name=test-app" \
  "DASH0_RESOURCE_ATTRIBUTES=k8s.pod.uid=1234,aaa=bbb,ccc=ddd"
run_test_case \
  "getenv: combine mapped app.kubernetes.io and resource.opentelemetry.io labels" \
  "app" \
  "node index.js otel_resource_attributes" \
  "OTEL_RESOURCE_ATTRIBUTES: aaa=bbb,ccc=ddd,k8s.namespace.name=my-namespace,k8s.pod.name=my-pod,k8s.pod.uid=275ecb36-5aa8-4c2a-9c47-d8bb681b9aff,k8s.container.name=test-app,service.name=service-name,service.version=service-version,service.namespace=service-namespace" \
  "DASH0_SERVICE_NAME=service-name DASH0_SERVICE_VERSION=service-version DASH0_SERVICE_NAMESPACE=service-namespace DASH0_RESOURCE_ATTRIBUTES=aaa=bbb,ccc=ddd"

if [ "${MISSING_ENVIRON_SYMBOL_TESTS:-}" = "true" ]; then
  # Regression tests for missing __environ symbol:
  run_test_case \
    "no __environ symbol: read unset environment variable" \
    "no_environ_symbol" \
    "./noenviron" \
    "The environmet variable \"NO_ENVIRON_TEST_VAR\" is not set."
  run_test_case \
    "no __environ symbol: read an environment variable that is set" \
    "no_environ_symbol" \
    "./noenviron" \
    "The environmet variable \"NO_ENVIRON_TEST_VAR\" had the value: \"some-value\"." \
    "NO_ENVIRON_TEST_VAR=some-value"
fi

