# SPDX-FileCopyrightText: Copyright 2024 Dash0 Inc.
# SPDX-License-Identifier: Apache-2.0

is_remote_image() {
  image_name=${1:-}
  if [[ -z "$image_name" ]]; then
    echo "error: mandatory argument \"image_name\" is missing"
    exit 1
  fi

  if [[ "$image_name" = *"/"* ]]; then
	return 0
  else
	return 1
  fi
}

copy_binary_from_container_image() {
  image_name=${1:-}
  if [[ -z "$image_name" ]]; then
    echo "error: mandatory argument \"image_name\" is missing"
    exit 1
  fi
  docker_platform=${2:-}
  if [[ -z "$docker_platform" ]]; then
    echo "error: mandatory argument \"docker_platform\" is missing"
    exit 1
  fi
  source_file_name=${3:-}
  if [[ -z "$source_file_name" ]]; then
    echo "error: mandatory argument \"source_file_name\" is missing"
    exit 1
  fi
  target_file_name=${4:-}
  if [[ -z "$target_file_name" ]]; then
    echo "error: mandatory argument \"target_file_name\" is missing"
    exit 1
  fi

  container_id=$(docker create --platform "$docker_platform" "$image_name")
  docker container cp \
    "$container_id:$source_file_name" \
    "$target_file_name"
  docker rm -v "$container_id"
}

cleanup_docker_containers_and_images() {
  if [[ "${DOCKER_CLEANUP_ENABLED:-}" = "false" ]]; then
	echo "[cleanup] skipping cleanup of containers and images"
	return
  fi

  base_dir=${1:-}
  if [[ -z "$base_dir" ]]; then
	echo "error: mandatory argument \"base_dir\" is missing"
	exit 1
  fi

  echo "[cleanup] deleting containers:"
  cat "$base_dir/.containers_to_be_deleted_at_end"
  echo
  echo "[cleanup] deleting container images:"
  cat "$base_dir/.container_images_to_be_deleted_at_end"
  echo

  while IFS= read -r container; do
    if [[ -n "$container" ]]; then
      docker rm -f "$container" || true
    fi
  done <<< $(cat "$base_dir/.containers_to_be_deleted_at_end" | sort | uniq)

  while IFS= read -r image; do
    if [[ -n "$image" ]]; then
      docker rmi -f "$image" || true
    fi
  done <<< $(cat "$base_dir/.container_images_to_be_deleted_at_end" | sort | uniq)

  rm "$base_dir/.containers_to_be_deleted_at_end"
  rm "$base_dir/.container_images_to_be_deleted_at_end"
}

cleanup_docker_containers_and_images_injector_tests() {
  cleanup_docker_containers_and_images injector/test
}

cleanup_docker_containers_and_images_instrumentation_image_tests() {
  cleanup_docker_containers_and_images test
}