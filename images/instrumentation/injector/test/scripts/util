# SPDX-FileCopyrightText: Copyright 2024 Dash0 Inc.
# SPDX-License-Identifier: Apache-2.0

is_remote_image() {
  image_name=${1:-}
  if [[ -z "$image_name" ]]; then
    echo "error: mandatory argument \"image_name\" is missing"
    exit 1
  fi

  if [[ "$image_name" = *"/"* ]]; then
	return 0
  else
	return 1
  fi
}

copy_binary_from_container_image() {
  image_name=${1:-}
  if [[ -z "$image_name" ]]; then
    echo "error: mandatory argument \"image_name\" is missing"
    exit 1
  fi
  docker_platform=${2:-}
  if [[ -z "$docker_platform" ]]; then
    echo "error: mandatory argument \"docker_platform\" is missing"
    exit 1
  fi
  source_file_name=${3:-}
  if [[ -z "$source_file_name" ]]; then
    echo "error: mandatory argument \"source_file_name\" is missing"
    exit 1
  fi
  target_file_name=${4:-}
  if [[ -z "$target_file_name" ]]; then
    echo "error: mandatory argument \"target_file_name\" is missing"
    exit 1
  fi

  container_id=$(docker create --platform "$docker_platform" "$image_name")
  docker container cp \
    "$container_id:$source_file_name" \
    "$target_file_name"
  docker rm -v "$container_id"
}

cleanup_docker_images() {
  if [[ "${DOCKER_CLEANUP_ENABLED:-}" = "false" ]]; then
	echo "[cleanup] skipping cleanup of container images"
	return
  fi

  local base_dir="injector/test"

  # while IFS= read -r image; do
  #   if [[ -n "$image" ]]; then
  #     docker rmi -f "$image" &> /dev/null || true
  #   fi
  # done <<< $(cat "$base_dir/.container_images_to_be_deleted_at_end" | sort | uniq)

  rm "$base_dir/.container_images_to_be_deleted_at_end"

  # Actually, instead of keeping track of containers and images, simply running docker builder prune --force might be
  # more effective. It is a bit invasive though, as it also removes stuff unrelated to the injector/instrumentation test
  # suite.
  # docker builder prune --force > /dev/null
}
