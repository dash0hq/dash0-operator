extends layout

block content
  h1 OTLP Resource Analyzer

  h2 Filter Settings

  div.row
    div.col-8.mb-3
      form(id="apply-filter", action="/", method="POST")
        label.form-label(for="filter")
          strong Resource Filter
        textarea.form-control(name="filter", rows=10, placeholder="edit your custom filter here", aria-label="edit resource filter")
          =currentFilterConfig
    div.col-4
      form.mb-3(action="/predefined", method="POST")
        label.form-label(for="predefined")
          strong Predefined Filters
        select.form-select(name="predefined", type="select", placeholder="select a predefined filter", aria-label="select predefined filter", onchange="this.form.submit()")
           option(value="") -- please choose --
           each filter in predefinedFilters
             option(value=filter.name, selected=filter.name===currentPredefinedFilterName) #{filter.name}
      form(action="/source-directory", method="POST")
        label.form-label(for="source-directory")
          strong Source Directory with OLTP files
        input.form-control(name="source-directory", id="source-directory", type="text", onchange="this.form.submit()", value=sourceDirectory)
  div.row
    p.buttons
      input.btn.btn-primary(type="submit", value="Apply Filter", form="apply-filter")

  if message
    strong.error Error: #{message}

  if results
    h2 Results

    h3 Summary
    ul
      li
        strong Analyzed resources: #{results.totalCount}
      li
        strong Resources matching the filter: #{results.matchingResourcesCount}

    h3 Matching Resources

    each resourceWrapper in results.matchingResources
      hr
      ul
        li
          strong Occurences: #{resourceWrapper.seen}
        li
          strong From Signal Types: #{Array.from(resourceWrapper.fromSignalTypes).join(', ')}
        li Scope Names: #{Array.from(resourceWrapper.scopeNames).join(', ')}
      table
        thead
          tr
            th Attribute
            th Value
        tbody
          each key in Object.keys(resourceWrapper.resource).sort()
            tr
              td #{key}
              td #{resourceWrapper.resource[key]}

