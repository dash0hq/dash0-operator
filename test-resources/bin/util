# SPDX-FileCopyrightText: Copyright 2024 Dash0 Inc.
# SPDX-License-Identifier: Apache-2.0

###############################################################################
# Utility functions for manual test scenarios.
###############################################################################

load_env_file () {
  if [[ ! -f test-resources/.env ]]; then
    echo "error: The file test-resources/.env does not exist. Copy test-resources/.env.template to test-resources/.env and edit it to provide a Dash0 authorization token."
    exit 1
  fi
  source test-resources/.env
}

verify_kubectx() {
  current_kubectx=$(kubectl config current-context)
  if [[ "$current_kubectx" != "${LOCAL_KUBECTX:-}" ]]; then
	echo "error: The current kubectx is not the expected local kubectx \"${LOCAL_KUBECTX:-}\". Please switch to the local context or set LOCAL_KUBECTX differently in .env. Refusing to run test scenarios/cleanup in a potentially remote context."
	exit 1
  fi
}

setup_test_environment () {
  install_cert_manager_if_necessary
  test-resources/bin/render-templates.sh
}

install_cert_manager_if_necessary () {
  if ! kubectl get ns cert-manager &> /dev/null; then
    echo cert-manager namespace not found, deploying cert-manager
    test-resources/cert-manager/deploy.sh
  fi
}

is_remote_image() {
  image_name=${1:-}
  if [[ $image_name == *"/"* ]]; then
    return 0
  else
    return 1
  fi
}

build_operator_controller_image() {
  if [[ "${BUILD_OPERATOR_CONTROLLER_IMAGE:-}" = false ]]; then
    echo "Skipping operator controller image build (BUILD_OPERATOR_CONTROLLER_IMAGE=false)."
    return
  fi
  if [[ -n "${IMG:-}" ]]; then
    if is_remote_image "$IMG"; then
      echo "The specified image IMG=$IMG looks like a remote image, refusing to build it and overwrite it with a locally built image. Set BUILD_OPERATOR_CONTROLLER_IMAGE=false to skip this step and use the remote image."
      exit 1
    fi
  fi
  if [[ -n "${IMG_REPOSITORY:-}" ]]; then
    if is_remote_image "$IMG_REPOSITORY"; then
      echo "The specified image IMG_REPOSITORY=$IMG_REPOSITORY looks like a remote image, refusing to build it and overwrite it with a locally built image. Set BUILD_OPERATOR_CONTROLLER_IMAGE=false to skip this step and use the remote image."
      exit 1
    fi
  fi

  make docker-build
}

build_instrumentation_image() {
  if [[ "${BUILD_INSTRUMENTATION_IMAGE:-}" = false ]]; then
    echo "Skipping instrumentation image build (BUILD_INSTRUMENTATION_IMAGE=false)."
    return
  fi
  if [[ -n "${INSTRUMENTATION_IMG_REPOSITORY:-}" ]]; then
    if is_remote_image "$INSTRUMENTATION_IMG_REPOSITORY"; then
      echo "The specified image INSTRUMENTATION_IMG_REPOSITORY=$INSTRUMENTATION_IMG_REPOSITORY looks like a remote image, refusing to build it and overwrite it with a locally built image. Set BUILD_INSTRUMENTATION_IMAGE=false to skip this step and use the remote image."
      exit 1
    fi
  fi
  repository="${INSTRUMENTATION_IMG_REPOSITORY:-instrumentation}"
	tag="${INSTRUMENTATION_IMG_TAG:-latest}"
  images/instrumentation/build.sh $repository $tag
}

deploy_via_helm() {
  helm_install_command=$(cat <<EOF
  helm install
		--namespace dash0-system
		--set operator.developmentMode=true
EOF
)
  if ! has_been_set_to_empty_string "IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.image.repository=${IMG_REPOSITORY:-operator-controller}"
  fi
  if ! has_been_set_to_empty_string "IMG_TAG"; then
    helm_install_command+=" --set operator.image.tag=${IMG_TAG:-latest}"
  fi
  if [[ -n "${IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.image.digest=$IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.image.pullPolicy=${IMG_PULL_POLICY:-Never}"
  fi
  if ! has_been_set_to_empty_string "INSTRUMENTATION_IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.initContainerImage.repository=${INSTRUMENTATION_IMG_REPOSITORY:-instrumentation}"
  fi
  if ! has_been_set_to_empty_string "INSTRUMENTATION_IMG_TAG"; then
    helm_install_command+=" --set operator.initContainerImage.tag=${INSTRUMENTATION_IMG_TAG:-latest}"
  fi
  if [[ -n "${INSTRUMENTATION_IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.initContainerImage.digest=$INSTRUMENTATION_IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "INSTRUMENTATION_IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.initContainerImage.pullPolicy=${INSTRUMENTATION_IMG_PULL_POLICY:-Never}"
  fi
  helm_install_command+=" dash0-operator"
	helm_install_command+=" ${OPERATOR_HELM_CHART:-helm-chart/dash0-operator}"
  echo Helm install command:
  echo "$helm_install_command"
  $helm_install_command
}

has_been_set_to_empty_string() {
  env_var_name=$1
  value=${!env_var_name:-}
  is_set=${!env_var_name+is_set}

  if [ -z "$value" ] && [ "$is_set" = "is_set" ]; then
    return 0
  elif [ -n "$value" ]; then
    return 1
  else
    return 1
  fi
}
