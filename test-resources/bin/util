# SPDX-FileCopyrightText: Copyright 2024 Dash0 Inc.
# SPDX-License-Identifier: Apache-2.0

###############################################################################
# Utility functions for manual test scenarios.
###############################################################################

load_env_file () {
  if [[ ! -f test-resources/.env ]]; then
    echo "error: The file test-resources/.env does not exist. Copy test-resources/.env.template to test-resources/.env and edit it to provide a Dash0 authorization token."
    exit 1
  fi
  source test-resources/.env
}

verify_kubectx() {
  current_kubectx=$(kubectl config current-context)
  if [[ "$current_kubectx" != "${LOCAL_KUBECTX:-}" ]]; then
	echo "error: The current kubectx is not the expected local kubectx \"${LOCAL_KUBECTX:-}\". Please switch to the local context or set LOCAL_KUBECTX differently in .env. Refusing to run test scenarios/cleanup in a potentially remote context."
	exit 1
  fi
}

setup_test_environment () {
  test-resources/bin/render-templates.sh
}

build_all_images() {
  make docker-build
}

deploy_via_helm() {
  helm_install_command="helm install --namespace dash0-system"
  if [[ -n "${OPERATOR_HELM_CHART_VERSION:-}" ]]; then
    helm_install_command+=" --version $OPERATOR_HELM_CHART_VERSION"
  fi
  helm_install_command+=" --set operator.developmentMode=true"
  if ! has_been_set_to_empty_string "CONTROLLER_IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.image.repository=${CONTROLLER_IMG_REPOSITORY:-operator-controller}"
  fi
  if ! has_been_set_to_empty_string "CONTROLLER_IMG_TAG"; then
    helm_install_command+=" --set operator.image.tag=${CONTROLLER_IMG_TAG:-latest}"
  fi
  if [[ -n "${CONTROLLER_IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.image.digest=$IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "CONTROLLER_IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.image.pullPolicy=${CONTROLLER_IMG_PULL_POLICY:-Never}"
  fi

  if ! has_been_set_to_empty_string "INSTRUMENTATION_IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.initContainerImage.repository=${INSTRUMENTATION_IMG_REPOSITORY:-instrumentation}"
  fi
  if ! has_been_set_to_empty_string "INSTRUMENTATION_IMG_TAG"; then
    helm_install_command+=" --set operator.initContainerImage.tag=${INSTRUMENTATION_IMG_TAG:-latest}"
  fi
  if [[ -n "${INSTRUMENTATION_IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.initContainerImage.digest=$INSTRUMENTATION_IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "INSTRUMENTATION_IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.initContainerImage.pullPolicy=${INSTRUMENTATION_IMG_PULL_POLICY:-Never}"
  fi

  if ! has_been_set_to_empty_string "COLLECTOR_IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.collectorImage.repository=${COLLECTOR_IMG_REPOSITORY:-collector}"
  fi
  if ! has_been_set_to_empty_string "COLLECTOR_IMG_TAG"; then
    helm_install_command+=" --set operator.collectorImage.tag=${COLLECTOR_IMG_TAG:-latest}"
  fi
  if [[ -n "${COLLECTOR_IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.collectorImage.digest=$COLLECTOR_IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "COLLECTOR_IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.collectorImage.pullPolicy=${COLLECTOR_IMG_PULL_POLICY:-Never}"
  fi

  if ! has_been_set_to_empty_string "CONFIGURATION_RELOADER_IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.configurationReloaderImage.repository=${CONFIGURATION_RELOADER_IMG_REPOSITORY:-configuration-reloader}"
  fi
  if ! has_been_set_to_empty_string "CONFIGURATION_RELOADER_IMG_TAG"; then
    helm_install_command+=" --set operator.configurationReloaderImage.tag=${CONFIGURATION_RELOADER_IMG_TAG:-latest}"
  fi
  if [[ -n "${CONFIGURATION_RELOADER_IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.configurationReloaderImage.digest=$CONFIGURATION_RELOADER_IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "CONFIGURATION_RELOADER_IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.configurationReloaderImage.pullPolicy=${CONFIGURATION_RELOADER_IMG_PULL_POLICY:-Never}"
  fi

  if ! has_been_set_to_empty_string "FILELOG_OFFSET_SYNCH_IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.filelogOffsetSynchImage.repository=${FILELOG_OFFSET_SYNCH_IMG_REPOSITORY:-filelog-offset-synch}"
  fi
  if ! has_been_set_to_empty_string "FILELOG_OFFSET_SYNCH_IMG_TAG"; then
    helm_install_command+=" --set operator.filelogOffsetSynchImage.tag=${FILELOG_OFFSET_SYNCH_IMG_TAG:-latest}"
  fi
  if [[ -n "${FILELOG_OFFSET_SYNCH_IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.filelogOffsetSynchImage.digest=$FILELOG_OFFSET_SYNCH_IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "FILELOG_OFFSET_SYNCH_IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.filelogOffsetSynchImage.pullPolicy=${FILELOG_OFFSET_SYNCH_IMG_PULL_POLICY:-Never}"
  fi

  # Deploy an operator configuration right away.
  helm_install_command+=" --set operator.dash0Backend.enabled=true"
  helm_install_command+=" --set operator.dash0Backend.endpoint=ingress.eu-west-1.aws.dash0-dev.com:4317"
  helm_install_command+=" --set operator.dash0Backend.secretRef.name=dash0-authorization-secret"
  helm_install_command+=" --set operator.dash0Backend.secretRef.key=token"

  helm_install_command+=" dash0-operator"
  helm_install_command+=" ${OPERATOR_HELM_CHART:-helm-chart/dash0-operator}"
  echo Helm install command:
  echo "$helm_install_command"
  $helm_install_command

  wait_for_operator_manager_and_webhook
}


wait_for_operator_manager_and_webhook() {
  echo "waiting for the operator deployment to become available..."
  kubectl wait deployment.apps/dash0-operator-controller --for condition=Available --namespace dash0-system --timeout 30s

  echo "waiting for the operator's webhook endpoint to become available..."
  for ((i=0; i<=100; i++)); do
    endpoints_output=$(kubectl get endpoints --namespace dash0-system dash0-operator-webhook-service)
    expected_endpoint_regex='dash0-operator-webhook-service[[:blank:]]+[[:digit:]\.]+:9443'
    if [[ "$endpoints_output" =~ $expected_endpoint_regex ]]; then
      break;
    fi
    sleep 0.3
  done

  # We deploy an operator configuration at startup via operator.dash0Backend.enabled=true, wait for that resource to
  # become available as well.
  echo "waiting for the automatically created operator configuration resource to become available"
  for ((i=0; i<=20; i++)); do
    # wait until the resource has been created
    if kubectl get dash0operatorconfigurations.operator.dash0.com/dash0-operator-configuration-auto-resource; then
       break;
    fi
    sleep 1
  done
  # wait until the resource has been reconciled and is marked as available
  kubectl wait dash0operatorconfigurations.operator.dash0.com/dash0-operator-configuration-auto-resource --for condition=Available --timeout 30s
}

has_been_set_to_empty_string() {
  env_var_name=$1
  value=${!env_var_name:-}
  is_set=${!env_var_name+is_set}

  if [ -z "$value" ] && [ "$is_set" = "is_set" ]; then
    return 0
  elif [ -n "$value" ]; then
    return 1
  else
    return 1
  fi
}

install_operator_configuration_resource() {
  kubectl apply -f test-resources/customresources/dash0operatorconfiguration/dash0operatorconfiguration.secret.yaml

  echo "waiting for the operator configuration resource to become available"
  kubectl wait dash0operatorconfigurations.operator.dash0.com/dash0-operator-configuration-resource --for condition=Available

  # Deploying the operator configuration resource might result in a restart of the operator manager deployment pod,
  # hence we check again that both are up and running.
  wait_for_operator_manager_and_webhook
}

install_monitoring_resource() {
  kubectl apply -n ${target_namespace} -f test-resources/customresources/dash0monitoring/dash0monitoring.yaml

  echo "waiting for the monitoring resource to become available"
  kubectl wait --namespace ${target_namespace} dash0monitorings.operator.dash0.com/dash0-monitoring-resource --for condition=Available
}
