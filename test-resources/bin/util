# SPDX-FileCopyrightText: Copyright 2024 Dash0 Inc.
# SPDX-License-Identifier: Apache-2.0

###############################################################################
# Utility functions for manual test scenarios.
###############################################################################

load_env_file () {
  if [[ ! -f test-resources/.env ]]; then
    echo "error: The file test-resources/.env does not exist. Copy test-resources/.env.template to test-resources/.env and edit it to provide a Dash0 authorization token."
    exit 1
  fi
  source test-resources/.env
}

verify_kubectx() {
  current_kubectx=$(kubectl config current-context)
  if [[ "$current_kubectx" != "${LOCAL_KUBECTX:-}" ]]; then
	echo "error: The current kubectx is not the expected local kubectx \"${LOCAL_KUBECTX:-}\". Please switch to the local context or set LOCAL_KUBECTX differently in .env. Refusing to run test scenarios/cleanup in a potentially remote context."
	exit 1
  fi
}

setup_test_environment () {
  test-resources/bin/render-templates.sh
}

build_all_images() {
  echo "build operator controller image"
  build_operator_controller_image
  echo
  echo "build instrumentation image"
  build_instrumentation_image
  echo
  # TODO this is redundant with make docker-build, move either all image builds to
  # make docker-build (including the instrumentation image) and remove the three function calls below
  # or remove the collector and configuration reloader image builds from make docker-build.
  echo "build collecter image"
  build_collector_image
  echo
  echo "build configuration reloader image"
  build_configuration_reloader_image
  echo "build filelog offset synch image"
  build_filelog_offset_synch_image
  echo
}

is_remote_image() {
  image_name=${1:-}
  if [[ $image_name == *"/"* ]]; then
    return 0
  else
    return 1
  fi
}

should_build_image_locally() {
  img_to_check=$1
  if [[ -n "${img_to_check:-}" ]]; then
    if is_remote_image "$img_to_check"; then
	  echo "not rebuilding the image $img_to_check, this looks like a remote image"
      return 1
    fi
  elif [[ -n "${OPERATOR_HELM_CHART_URL:-}" ]]; then
    echo "not rebuilding image, a remote Helm chart is used with the default image from the chart",
    return 1
  fi

  return 0
}

build_operator_controller_image() {
  if ! should_build_image_locally "${CONTROLLER_IMG_REPOSITORY:-}"; then
    return
  fi

  make docker-build
}

build_instrumentation_image() {
  if ! should_build_image_locally "${INSTRUMENTATION_IMG_REPOSITORY:-}"; then
    return
  fi

  repository="${INSTRUMENTATION_IMG_REPOSITORY:-instrumentation}"
  tag="${INSTRUMENTATION_IMG_TAG:-latest}"
  images/instrumentation/build.sh $repository $tag
}

build_collector_image() {
  if ! should_build_image_locally "${COLLECTOR_IMG_REPOSITORY:-}"; then
    return
  fi

  repository="${COLLECTOR_IMG_REPOSITORY:-collector}"
  tag="${COLLECTOR_IMG_TAG:-latest}"
  docker build images/collector -t "${repository}":"${tag}"
}

build_configuration_reloader_image() {
  if ! should_build_image_locally "${CONFIGURATION_RELOADER_IMG_REPOSITORY:-}"; then
    return
  fi

  repository="${CONFIGURATION_RELOADER_IMG_REPOSITORY:-configuration-reloader}"
  tag="${CONFIGURATION_RELOADER_IMG_TAG:-latest}"
  docker build images/configreloader -t "${repository}":"${tag}"
}

build_filelog_offset_synch_image() {
  if ! should_build_image_locally "${FILELOG_OFFSET_SYNCH_IMG_REPOSITORY:-}"; then
    return
  fi

  repository="${FILELOG_OFFSET_SYNCH_IMG_REPOSITORY:-configuration-reloader}"
  tag="${FILELOG_OFFSET_SYNCH_IMG_TAG:-latest}"
  docker build images/configreloader -t "${repository}":"${tag}"
}

deploy_via_helm() {
  helm_install_command="helm install --namespace dash0-system --set operator.developmentMode=true"

  if ! has_been_set_to_empty_string "CONTROLLER_IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.image.repository=${CONTROLLER_IMG_REPOSITORY:-operator-controller}"
  fi
  if ! has_been_set_to_empty_string "CONTROLLER_IMG_TAG"; then
    helm_install_command+=" --set operator.image.tag=${CONTROLLER_IMG_TAG:-latest}"
  fi
  if [[ -n "${CONTROLLER_IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.image.digest=$IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "CONTROLLER_IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.image.pullPolicy=${CONTROLLER_IMG_PULL_POLICY:-Never}"
  fi

  if ! has_been_set_to_empty_string "INSTRUMENTATION_IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.initContainerImage.repository=${INSTRUMENTATION_IMG_REPOSITORY:-instrumentation}"
  fi
  if ! has_been_set_to_empty_string "INSTRUMENTATION_IMG_TAG"; then
    helm_install_command+=" --set operator.initContainerImage.tag=${INSTRUMENTATION_IMG_TAG:-latest}"
  fi
  if [[ -n "${INSTRUMENTATION_IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.initContainerImage.digest=$INSTRUMENTATION_IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "INSTRUMENTATION_IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.initContainerImage.pullPolicy=${INSTRUMENTATION_IMG_PULL_POLICY:-Never}"
  fi

  if ! has_been_set_to_empty_string "COLLECTOR_IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.collectorImage.repository=${COLLECTOR_IMG_REPOSITORY:-collector}"
  fi
  if ! has_been_set_to_empty_string "COLLECTOR_IMG_TAG"; then
    helm_install_command+=" --set operator.collectorImage.tag=${COLLECTOR_IMG_TAG:-latest}"
  fi
  if [[ -n "${COLLECTOR_IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.collectorImage.digest=$COLLECTOR_IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "COLLECTOR_IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.collectorImage.pullPolicy=${COLLECTOR_IMG_PULL_POLICY:-Never}"
  fi

  if ! has_been_set_to_empty_string "CONFIGURATION_RELOADER_IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.configurationReloaderImage.repository=${CONFIGURATION_RELOADER_IMG_REPOSITORY:-configuration-reloader}"
  fi
  if ! has_been_set_to_empty_string "CONFIGURATION_RELOADER_IMG_TAG"; then
    helm_install_command+=" --set operator.configurationReloaderImage.tag=${CONFIGURATION_RELOADER_IMG_TAG:-latest}"
  fi
  if [[ -n "${CONFIGURATION_RELOADER_IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.configurationReloaderImage.digest=$CONFIGURATION_RELOADER_IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "CONFIGURATION_RELOADER_IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.configurationReloaderImage.pullPolicy=${CONFIGURATION_RELOADER_IMG_PULL_POLICY:-Never}"
  fi

  if ! has_been_set_to_empty_string "FILELOG_OFFSET_SYNCH_IMG_REPOSITORY"; then
    helm_install_command+=" --set operator.filelogOffsetSynchImage.repository=${FILELOG_OFFSET_SYNCH_IMG_REPOSITORY:-filelog-offset-synch}"
  fi
  if ! has_been_set_to_empty_string "FILELOG_OFFSET_SYNCH_IMG_TAG"; then
    helm_install_command+=" --set operator.filelogOffsetSynchImage.tag=${FILELOG_OFFSET_SYNCH_IMG_TAG:-latest}"
  fi
  if [[ -n "${FILELOG_OFFSET_SYNCH_IMG_DIGEST:-}" ]]; then
    helm_install_command+=" --set operator.filelogOffsetSynchImage.digest=$FILELOG_OFFSET_SYNCH_IMG_DIGEST"
  fi
  if ! has_been_set_to_empty_string "FILELOG_OFFSET_SYNCH_IMG_PULL_POLICY"; then
    helm_install_command+=" --set operator.filelogOffsetSynchImage.pullPolicy=${FILELOG_OFFSET_SYNCH_IMG_PULL_POLICY:-Never}"
  fi

  helm_install_command+=" dash0-operator"
  helm_install_command+=" ${OPERATOR_HELM_CHART:-helm-chart/dash0-operator}"
  echo Helm install command:
  echo "$helm_install_command"
  $helm_install_command
}

has_been_set_to_empty_string() {
  env_var_name=$1
  value=${!env_var_name:-}
  is_set=${!env_var_name+is_set}

  if [ -z "$value" ] && [ "$is_set" = "is_set" ]; then
    return 0
  elif [ -n "$value" ]; then
    return 1
  else
    return 1
  fi
}
