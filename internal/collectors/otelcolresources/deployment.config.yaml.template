extensions:
  health_check:
    endpoint: "{{ .SelfIpReference }}:13133"


receivers:
  k8s_cluster:
    metrics:
      k8s.container.restarts:
        enabled: false
      k8s.namespace.phase:
        enabled: false


processors:
{{- if .SendBatchMaxSize }}
  batch:
    send_batch_max_size: {{ .SendBatchMaxSize }}
{{- else }}
  batch: {}
{{- end }}

  k8sattributes:
    extract:
      metadata:
      - k8s.cluster.uid
      - k8s.cronjob.name
      # - k8s.cronjob.uid actually not implemented although advertised in k8sattributes' readme.
      - k8s.daemonset.name
      - k8s.daemonset.uid
      - k8s.deployment.name
      - k8s.deployment.uid
      - k8s.job.name
      - k8s.job.uid
      - k8s.namespace.name
      - k8s.node.name
      - k8s.pod.hostname
      - k8s.pod.ip
      - k8s.pod.name
      - k8s.pod.start_time
      - k8s.pod.uid
      - k8s.replicaset.name
      - k8s.replicaset.uid
      - k8s.statefulset.name
      - k8s.statefulset.uid
      # The following two work only if k8s.pod.uid and k8s.container.name are set
      - container.image.name
      - container.image.tag
{{- if .CollectPodLabelsAndAnnotationsEnabled }}
      labels:
        - tag_name: k8s.pod.label.$$1
          key_regex: (.*)
          from: pod
      annotations:
        - tag_name: k8s.pod.annotation.$$1
          key_regex: (.*)
          from: pod
{{- end }}
    passthrough: false
    pod_association:
    - sources:
      - from: resource_attribute
        name: k8s.pod.ip
    - sources:
      - from: resource_attribute
        name: k8s.pod.uid

  # Limit resource attributes to a reasonable maximum length. This is particularly important when transforming
  # Kubernetes pod annotations to resource attributes, which can hold up to 256KB of data.
  transform/resources:
    error_mode: ignore
    trace_statements:
      - context: resource
      - statements:
        - truncate_all(resource.attributes, 2048)
    metric_statements:
      - context: resource
      - statements:
        - truncate_all(resource.attributes, 2048)
    log_statements:
      - context: resource
      - statements:
        - truncate_all(resource.attributes, 2048)

  {{- if .ClusterName }}
  resource/clustername:
    attributes:
      - key: k8s.cluster.name
        value: "{{ .ClusterName }}"
        action: insert
  {{- end }}

{{ if .NamespaceOttlFilter }}
  filter/metrics/only_monitored_namespaces:
    metrics:
      metric:
        - {{ .NamespaceOttlFilter }}
{{- end }}

  # Remove noisy replicaset metrics (by default, Kubernetes keeps a history of 10 replicasets for each deployment,
  # collecting metrics about all of them leads to a lot of metrics with no value). Removing zero-value datapoints
  # makes sure the backend knows about the actual active replicaset (with desired > 0).
  filter/drop-replicaset-metrics-zero-value:
    error_mode: ignore
    metrics:
      datapoint:
      - metric.name == "k8s.replicaset.available" and value_int == 0
      - metric.name == "k8s.replicaset.desired" and value_int == 0

{{ if .CustomFilters.HasMetricFilters }}
  filter/metrics/custom_telemetry_filter:
    error_mode: ignore
    metrics:
      {{- if .CustomFilters.MetricConditions }}
      metric:
        {{- range $i, $condition := .CustomFilters.MetricConditions }}
        - '{{ $condition }}'
        {{- end }}
      {{- end }}
      {{- if .CustomFilters.DataPointConditions }}
      datapoint:
        {{- range $i, $condition := .CustomFilters.DataPointConditions }}
        - '{{ $condition }}'
        {{- end }}
      {{- end }}
{{- end }}

{{ if .CustomTransforms.HasMetricTransforms }}
  transform/metrics/custom_telemetry_transform:
    error_mode: {{ .CustomTransforms.GlobalErrorMode }}
    metric_statements:
      {{- range $i, $group := .CustomTransforms.MetricGroups }}
      - statements:
          {{- range $i, $statement := $group.Statements }}
          - '{{ $statement }}'
          {{- end }}
      {{- if $group.Conditions }}
        conditions:
          {{- range $i, $condition := $group.Conditions }}
          - '{{ $condition }}'
          {{- end }}
      {{- end }}
      {{- if $group.ErrorMode }}
        error_mode: {{ $group.ErrorMode }}
      {{- end }}
      {{- if $group.Context }}
        context: {{ $group.Context }}
      {{- end }}
      {{- end }}
{{- end }}

  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25


exporters:
{{- if .DebugVerbosityDetailed }}
  debug:
    verbosity: detailed
{{ else if .DevelopmentMode }}
  debug: {}
{{- end }}
{{- range $i, $exporter := .ExportersDefault }}
  {{ $exporter.Name }}:
    endpoint: "{{ $exporter.Endpoint }}"
    {{- if $exporter.Insecure }}
    tls:
      insecure: true
    {{- else if $exporter.InsecureSkipVerify }}
    tls:
      insecure_skip_verify: true
    {{- end }}
{{- if $exporter.Headers }}
    headers:
{{- range $i, $header := $exporter.Headers }}
      "{{ $header.Name }}": "{{ $header.Value }}"
{{- end }}
{{- end }}
{{- if $exporter.Encoding }}
    encoding: "{{ $exporter.Encoding }}"
{{- end }}
{{- end }}


service:
  extensions:
  - health_check

  pipelines:

    metrics/downstream:
      receivers:
      - k8s_cluster
      processors:
      - k8sattributes
      {{- if .ClusterName }}
      - resource/clustername
      {{- end }}
      {{- if .NamespaceOttlFilter }}
      - filter/metrics/only_monitored_namespaces
      {{- end }}
      - filter/drop-replicaset-metrics-zero-value
      {{- if .CustomFilters.HasMetricFilters }}
      - filter/metrics/custom_telemetry_filter
      {{- end }}
      {{- if .CustomTransforms.HasMetricTransforms }}
      - transform/metrics/custom_telemetry_transform
      {{- end }}
      - transform/resources
      - memory_limiter
      - batch
      exporters:
      {{- if (or .DevelopmentMode .DebugVerbosityDetailed) }}
      - debug
      {{- end }}
      {{- range $i, $exporter := .ExportersDefault }}
      - {{ $exporter.Name }}
      {{- end }}

{{- if .InternalTelemetryEnabled }}
  telemetry:
    resource:
      "k8s.cluster.uid": "{{- .PseudoClusterUid }}"
      {{- if .ClusterName }}
      "k8s.cluster.name": "{{- .ClusterName }}"
      {{- end }}
      "k8s.node.name": "${env:K8S_NODE_NAME}"
      "k8s.namespace.name": "${env:DASH0_OPERATOR_NAMESPACE}"
      "k8s.deployment.uid": "${env:K8S_DEPLOYMENT_UID}"
      "k8s.deployment.name": "${env:K8S_DEPLOYMENT_NAME}"
      "k8s.pod.uid": "${env:K8S_POD_UID}"
      "k8s.pod.name": "${env:K8S_POD_NAME}"
      "k8s.container.name": "opentelemetry-collector"

{{- if .SelfMonitoringMetricsConfig }}
{{- .SelfMonitoringMetricsConfig }}
{{- end }}
{{- if .SelfMonitoringLogsConfig }}
{{- .SelfMonitoringLogsConfig }}
{{- end }}
{{- end }}
