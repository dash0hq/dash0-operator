{{- /*
Note: Subtle formatting issues will cause the edit mode in k9s to be thwarted because the actual configmap content will
be displayed as a single long quoted string with literal \n characters, instead of being properly formatted as yaml. In
particular, having one or multiple space characters appear directly before a line break will cause this.
See https://github.com/kubernetes/kubernetes/issues/36222#issuecomment-2006988070. This does not affect the collector,
as it can still parse the config map perfectly fine, but it makes troubleshooting in k9s inconvenient.

Therefore, for text/template pipelines that might result in no output (in particular comments and `if` conditions),
avoid starting the pipeline with "{{" if it is indented (i.e. there are space characters before "{{"). This would leave
spaces followed by a line break in the rendered output.
Instead, either
1. start the pipeline with "{{-" (to consume leading whitespace), or
2. start the pipeline with "{{" but omit indentation, i.e. start the pipeline directly at the start of the line without
   leading space characters.

Note that the first option will also consume _all_ preceding line breaks, so if a line break is desired in the output,
use option 2.
*/}}
extensions:
  health_check:
    endpoint: "{{ .SelfIpReference }}:13133"
  file_storage/filelogreceiver_offsets:
    directory: /var/otelcol/filelogreceiver_offsets
    timeout: 1s


connectors:
  forward/metrics/prometheus: {}
  forward/logs: {}

  routing/traces:
    default_pipelines: [traces/export/_default]
    error_mode: ignore
    table:
      - context: resource
        condition: attributes["k8s.namespace.name"] == "routed-namespace"
        pipelines: [traces/export/routed-namespace]
  routing/metrics:
    default_pipelines: [metrics/export/_default]
    error_mode: ignore
    table:
      - context: resource
        condition: attributes["k8s.namespace.name"] == "routed-namespace"
        pipelines: [metrics/export/routed-namespace]
  routing/logs:
    default_pipelines: [logs/export/_default]
    error_mode: ignore
    table:
      - context: resource
        condition: attributes["k8s.namespace.name"] == "routed-namespace"
        pipelines: [logs/export/routed-namespace]


receivers:
  otlp:
    protocols:
      grpc:
        endpoint: "{{ .SelfIpReference }}:4317"
        max_recv_msg_size_mib: 8388608
      http:
        endpoint: "{{ .SelfIpReference }}:4318"

{{- if .KubeletStatsReceiverConfig.Enabled }}
  kubeletstats:
    endpoint: '{{ .KubeletStatsReceiverConfig.Endpoint }}'
    auth_type: "{{ .KubeletStatsReceiverConfig.AuthType }}"
    collection_interval: 20s
{{- if .KubeletStatsReceiverConfig.InsecureSkipVerify }}
    insecure_skip_verify: true
{{ end }}
{{- /* Note: Even if we use K8s_NODE_IP for the endpoint, it is still correct to use K8S_NODE_NAME for 'node'. The node
      value will only be used as a resource attribute. */}}
    node: '${env:K8S_NODE_NAME}'
    metric_groups:
    - container
    - pod
    - node
    - volume
    extra_metadata_labels:
      - container.id
      - k8s.volume.type
    k8s_api_config:
      auth_type: serviceAccount
    metrics:
      # deprecated -> container.cpu.usage
      container.cpu.utilization:
        enabled: false
      # deprecated -> k8s.node.cpu.usage
      k8s.node.cpu.utilization:
        enabled: false
      # deprecated -> k8s.pod.cpu.usage
      k8s.pod.cpu.utilization:
        enabled: false
      container.cpu.usage:
        enabled: true
      k8s.node.cpu.usage:
        enabled: true
      k8s.pod.cpu.usage:
        enabled: true
      k8s.pod.cpu_limit_utilization:
        enabled: true
      k8s.pod.cpu_request_utilization:
        enabled: true
      k8s.pod.memory_limit_utilization:
        enabled: true
      k8s.pod.memory_request_utilization:
        enabled: true
      # With metric_groups including "volume" (see above), volume metrics will be collected. Disable the inode-related
      # metrics, and only leave k8s.volume.available and k8s.volume.capacity enabled (they are enabled by default if
      # the metric group volume is explicitly enabled via metric_groups).
      k8s.volume.inodes:
        enabled: false
      k8s.volume.inodes.free:
        enabled: false
      k8s.volume.inodes.used:
        enabled: false

{{- end }}{{/* if .KubeletStatsReceiverConfig.Enabled */}}

{{- if .UseHostMetricsReceiver }}
  hostmetrics:
    collection_interval: 60s
    root_path: /hostfs
    scrapers:
      cpu:
        metrics:
          # disable all metrics that are enabled by default (there is only one)
          system.cpu.time:
            enabled: false
          # Explicitly enable the cpu utilization metric
          system.cpu.utilization:
            enabled: true
      filesystem:
        metrics:
          # disable all metrics that are enabled by default
          system.filesystem.inodes.usage:
            enabled: false
          system.filesystem.usage:
            enabled: false
          system.filesystem.utilization:
            enabled: true
        {{- /*
        exclude_fs_types and exclude_mount_points are taken from collector's official helm chart:
        https://github.com/open-telemetry/opentelemetry-helm-charts/blob/f75b282f2867f1c9689ba9e28083cba15a98b66b/charts/opentelemetry-collector/templates/_config.tpl#L69-L115
        */}}
        exclude_fs_types:
          fs_types:
          - autofs
          - binfmt_misc
          - bpf
          - cgroup2
          - configfs
          - debugfs
          - devpts
          - devtmpfs
          - fusectl
          - hugetlbfs
          - iso9660
          - mqueue
          - nsfs
          - overlay
          - proc
          - procfs
          - pstore
          - rpc_pipefs
          - securityfs
          - selinuxfs
          - squashfs
          - sysfs
          - tracefs
          match_type: strict
        exclude_mount_points:
          match_type: regexp
          mount_points:
          - /dev/*
          - /proc/*
          - /sys/*
          - /run/k3s/containerd/*
          - /var/lib/docker/*
          - /var/lib/kubelet/*
          - /snap/*
      memory:
        metrics:
          system.memory.usage:
            enabled: false
          system.memory.utilization:
            enabled: true
{{- end }}{{/* if .UseHostMetricsReceiver */}}

{{- $hasPrometheusScrapingEnabledForAtLeastOneNamespace := gt (len .NamespacesWithPrometheusScraping) 0 }}

{{- if $hasPrometheusScrapingEnabledForAtLeastOneNamespace }}
  prometheus:
    config:
{{- /*
This particular set of scrape config jobs (dash0-kubernetes-pods-scrape-config and
dash0-kubernetes-pods-scrape-config-slow) is mostly a copy of
https://github.com/prometheus-community/helm-charts/blob/5adf0ee898e8e5430471cb43a5f9532745c22f81/charts/prometheus/values.yaml
to be compatible with the well-known configuration via annotations.
*/}}
      scrape_configs:

      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`,
      # except if `prometheus.io/scrape-slow` is set to `true` as well.
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      - job_name: 'dash0-kubernetes-pods-scrape-config'
        honor_labels: true
        fallback_scrape_protocol: "PrometheusText0.0.4"

        kubernetes_sd_configs:
          - role: pod
            # only scrape data from pods running on the same node as collector
            selectors:
              - role: pod
                field: "spec.nodeName=${K8S_NODE_NAME}"
            namespaces:
              names:
              {{- range $i, $namespace := .NamespacesWithPrometheusScraping }}
              - {{ $namespace }}
              {{- end }}

        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
            action: drop
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: replace
            regex: (https?)
            target_label: __scheme__
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
            action: replace
            regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
            replacement: '[$2]:$1'
            target_label: __address__
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
            action: replace
            regex: (\d+);((([0-9]+?)(\.|$)){4})
            replacement: $2:$1
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_phase]
            regex: Pending|Succeeded|Failed|Completed
            action: drop
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node

      # Example Scrape config for pods which should be scraped slower. An useful example
      # would be stackriver-exporter which queries an API on every scrape of the pod
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `prometheus.io/scrape-slow`: Only scrape pods that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      - job_name: 'dash0-kubernetes-pods-scrape-config-slow'
        honor_labels: true
        fallback_scrape_protocol: "PrometheusText0.0.4"

        scrape_interval: 5m
        scrape_timeout: 30s

        kubernetes_sd_configs:
          - role: pod
            # only scrape data from pods running on the same node as collector
            selectors:
              - role: pod
                field: "spec.nodeName=${K8S_NODE_NAME}"
            namespaces:
              names:
              {{- range $i, $namespace := .NamespacesWithPrometheusScraping }}
              - {{ $namespace }}
              {{- end }}

        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: replace
            regex: (https?)
            target_label: __scheme__
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
            action: replace
            regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
            replacement: '[$2]:$1'
            target_label: __address__
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
            action: replace
            regex: (\d+);((([0-9]+?)(\.|$)){4})
            replacement: $2:$1
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_phase]
            regex: Pending|Succeeded|Failed|Completed
            action: drop
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node
{{- end }}

{{- if .NamespacesWithLogCollection }}
  filelog:
    include:
{{- range $i, $namespace := .NamespacesWithLogCollection }}
    - /var/log/pods/{{ $namespace }}_*/*/*.log
{{- end}}
    storage: file_storage/filelogreceiver_offsets
    include_file_path: true
    include_file_name: false
    include_file_record_number: true
    operators:
    - id: container-parser
      max_log_size: 102400
      type: container
{{- end}}

processors:
{{- if .SendBatchMaxSize }}
  batch:
    send_batch_max_size: {{ .SendBatchMaxSize }}
{{- else }}
  batch: {}
{{- end }}

  resourcedetection:
    detectors:
    # note: later detectors override attributes provided by earlier detectors
    - system
    - ec2
    - eks
    - ecs
    - gcp
    - azure
    - aks
    - k8snode
    timeout: 2s
    system:
      resource_attributes:
        host.name:
          # Do not collect host.name via system resource detector, as this would result in the podname being set as the
          # hostname, see https://kubernetes.io/docs/concepts/containers/container-environment/#container-information.
          enabled: false

  k8sattributes:
    extract:
      metadata:
      - k8s.cluster.uid
      - k8s.cronjob.name
      # - k8s.cronjob.uid actually not implemented although advertised in k8sattributes' readme.
      - k8s.daemonset.name
      - k8s.daemonset.uid
      - k8s.deployment.name
      - k8s.deployment.uid
      - k8s.job.name
      - k8s.job.uid
      - k8s.namespace.name
      - k8s.node.name
      - k8s.pod.hostname
      - k8s.pod.ip
      - k8s.pod.name
      - k8s.pod.start_time
      - k8s.pod.uid
      - k8s.replicaset.name
      - k8s.replicaset.uid
      - k8s.statefulset.name
      - k8s.statefulset.uid
      # The following two work only if k8s.pod.uid and k8s.container.name are set
      - container.image.name
      - container.image.tag
{{- if .CollectPodLabelsAndAnnotationsEnabled }}
      labels:
        - tag_name: k8s.pod.label.$$1
          key_regex: (.*)
          from: pod
      annotations:
        - tag_name: k8s.pod.annotation.$$1
          key_regex: (.*)
          from: pod
{{- end }}
    filter:
      node_from_env_var: K8S_NODE_NAME
    passthrough: false
    pod_association:
    - sources:
      - from: resource_attribute
        name: k8s.pod.ip
    - sources:
      - from: resource_attribute
        name: k8s.pod.uid
    - sources:
      - from: connection

  # Limit resource attributes to a reasonable maximum length. This is particularly important when transforming
  # Kubernetes pod annotations to resource attributes, which can hold up to 256KB of data.
  transform/resources:
    error_mode: ignore
    trace_statements:
      - context: resource
      - statements:
        - truncate_all(resource.attributes, 2048)
    metric_statements:
      - context: resource
      - statements:
        - truncate_all(resource.attributes, 2048)
    log_statements:
      - context: resource
      - statements:
        - truncate_all(resource.attributes, 2048)

  {{- if $hasPrometheusScrapingEnabledForAtLeastOneNamespace }}
  transform/metrics/prometheus_service_attributes:
    error_mode: ignore
    metric_statements:
    - context: datapoint
      statements:

      # When the scraped service provides the target_info metric with a service_name attribute, use that. See
      # https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/compatibility/prometheus_and_openmetrics.md#resource-attributes
      # This enables workloads to determine their service name on their own. We give this rule precedence over the
      # service.name rule that uses app.kubernetes.io/name
      - set(resource.attributes["service.name"], resource.attributes["service_name"]) where IsMatch(resource.attributes["service.name"], "dash0-kubernetes-pods-scrape-config.*") and resource.attributes["service_name"] != "dash0-kubernetes-pods-scrape-config"

      # If the previous rule did not yield a good service name (e.g. there is no target_info metric available), we try
      # to get service attributes from the Kubernetes labels (app.kubernetes.io/name and friends) next. These three
      # labels are treated as one unit, that is, we only derive service.namespace and service.version from
      # app.kubernetes.io/version and serivce.namespace from app.kubernetes.io/part_of if we also derive service.name
      # from app.kubernetes.io/name.
      - set(resource.attributes["service.version"], attributes["app_kubernetes_io_version"])   where IsMatch(resource.attributes["service.name"], "dash0-kubernetes-pods-scrape-config.*") and attributes["app_kubernetes_io_name"] != nil and attributes["app_kubernetes_io_version"] != nil
      - set(resource.attributes["service.namespace"], attributes["app_kubernetes_io_part_of"]) where IsMatch(resource.attributes["service.name"], "dash0-kubernetes-pods-scrape-config.*") and attributes["app_kubernetes_io_name"] != nil and attributes["app_kubernetes_io_part_of"] != nil
      - set(resource.attributes["service.name"], attributes["app_kubernetes_io_name"])         where IsMatch(resource.attributes["service.name"], "dash0-kubernetes-pods-scrape-config.*") and attributes["app_kubernetes_io_name"] != nil

      # If the two rules above did yield a result, remove the prometheus service name. Otherwise the service name would
      # become the name of the scrape job, e.g. "dash0-kubernetes-pods-scrape-config". It is better to not have any
      # service name set as all than that, and let the backend merge the pod data with other telemetry for the pod, as
      # other telemetry might have a service name. We also remove the service.instance.id that was potentially set by
      # the prometheus receiver, since its value (<host>:<port> of the scraped URL) is not useful either.
      - delete_key(resource.attributes, "service.instance.id") where IsMatch(resource.attributes["service.name"], "dash0-kubernetes-pods-scrape-config.*")
      - delete_key(resource.attributes, "service.name")        where IsMatch(resource.attributes["service.name"], "dash0-kubernetes-pods-scrape-config.*")
  {{- end }}

  {{- if .ClusterName }}
  resource/clustername:
    attributes:
      - key: k8s.cluster.name
        value: "{{ .ClusterName }}"
        action: insert
  {{- end }}

{{ if .NamespaceOttlFilter }}
  # This is a standard filter which is always on; metrics collection receivers generate metrics for all namespaces in
  # the cluster, however, we only want to collect metrics from monitored namespaces, hence this filter.
  # See filter/metrics/$namespaceName filters for user-configurable filters per namespace.
  filter/metrics/only_monitored_namespaces:
    metrics:
      metric:
        - {{ .NamespaceOttlFilter }}
{{- end }}

{{ if .CustomFilters.HasTraceFilters }}
  filter/traces/custom_telemetry_filter:
    error_mode: {{ .CustomFilters.ErrorMode }}
    traces:
      {{- if .CustomFilters.SpanConditions }}
      span:
        {{- range $i, $condition := .CustomFilters.SpanConditions }}
        - '{{ $condition }}'
        {{- end }}
      {{- end }}
      {{- if .CustomFilters.SpanEventConditions }}
      spanevent:
        {{- range $i, $condition := .CustomFilters.SpanEventConditions }}
        - '{{ $condition }}'
        {{- end }}
      {{- end }}
{{- end }}
{{ if .CustomFilters.HasMetricFilters }}
  filter/metrics/custom_telemetry_filter:
    error_mode: {{ .CustomFilters.ErrorMode }}
    metrics:
      {{- if .CustomFilters.MetricConditions }}
      metric:
        {{- range $i, $condition := .CustomFilters.MetricConditions }}
        - '{{ $condition }}'
        {{- end }}
      {{- end }}
      {{- if .CustomFilters.DataPointConditions }}
      datapoint:
        {{- range $i, $condition := .CustomFilters.DataPointConditions }}
        - '{{ $condition }}'
        {{- end }}
      {{- end }}
{{ end }}
{{ if .CustomFilters.HasLogFilters }}
  filter/logs/custom_telemetry_filter:
    error_mode: {{ .CustomFilters.ErrorMode }}
    logs:
      {{- if .CustomFilters.LogRecordConditions }}
      log_record:
        {{- range $i, $condition := .CustomFilters.LogRecordConditions }}
        - '{{ $condition }}'
        {{- end }}
      {{- end }}
{{- end }}

{{ if .CustomTransforms.HasTraceTransforms }}
  transform/traces/custom_telemetry_transform:
    error_mode: {{ .CustomTransforms.GlobalErrorMode }}
    trace_statements:
      {{- range $i, $group := .CustomTransforms.TraceGroups }}
      - statements:
          {{- range $i, $statement := $group.Statements }}
          - '{{ $statement }}'
          {{- end }}
      {{- if $group.Conditions }}
        conditions:
          {{- range $i, $condition := $group.Conditions }}
          - '{{ $condition }}'
          {{- end }}
      {{- end }}
      {{- if $group.ErrorMode }}
        error_mode: {{ $group.ErrorMode }}
      {{- end }}
      {{- if $group.Context }}
        context: {{ $group.Context }}
      {{- end }}
      {{- end }}
{{- end }}
{{ if .CustomTransforms.HasMetricTransforms }}
  transform/metrics/custom_telemetry_transform:
    error_mode: {{ .CustomTransforms.GlobalErrorMode }}
    metric_statements:
      {{- range $i, $group := .CustomTransforms.MetricGroups }}
      - statements:
          {{- range $i, $statement := $group.Statements }}
          - '{{ $statement }}'
          {{- end }}
      {{- if $group.Conditions }}
        conditions:
          {{- range $i, $condition := $group.Conditions }}
          - '{{ $condition }}'
          {{- end }}
      {{- end }}
      {{- if $group.ErrorMode }}
        error_mode: {{ $group.ErrorMode }}
      {{- end }}
      {{- if $group.Context }}
        context: {{ $group.Context }}
      {{- end }}
      {{- end }}
{{- end }}
{{ if .CustomTransforms.HasLogTransforms }}
  transform/logs/custom_telemetry_transform:
    error_mode: {{ .CustomTransforms.GlobalErrorMode }}
    log_statements:
      {{- range $i, $group := .CustomTransforms.LogGroups }}
      - statements:
          {{- range $i, $statement := $group.Statements }}
          - '{{ $statement }}'
          {{- end }}
      {{- if $group.Conditions }}
        conditions:
          {{- range $i, $condition := $group.Conditions }}
          - '{{ $condition }}'
          {{- end }}
      {{- end }}
      {{- if $group.ErrorMode }}
        error_mode: {{ $group.ErrorMode }}
      {{- end }}
      {{- if $group.Context }}
        context: {{ $group.Context }}
      {{- end }}
      {{- end }}
{{- end }}

  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25


exporters:
{{- if .DebugVerbosityDetailed }}
  debug:
    verbosity: detailed
{{ else if .DevelopmentMode }}
  debug: {}
{{- end }}
{{- range $i, $exporter := .ExportersDefault }}
  {{ $exporter.Name }}:
    endpoint: "{{ $exporter.Endpoint }}"
{{- if $exporter.Insecure }}
    tls:
      insecure: true
{{ end }}
{{- if $exporter.Headers }}
    headers:
{{- range $i, $header := $exporter.Headers }}
      "{{ $header.Name }}": "{{ $header.Value }}"
{{- end }}
{{- end }}
{{- if $exporter.Encoding }}
    encoding: "{{ $exporter.Encoding }}"
{{- end }}
{{- end }}
{{- range $i, $exporter := .ExportersRouted }}
  {{ $exporter.Name }}:
    endpoint: "{{ $exporter.Endpoint }}"
{{- if $exporter.Insecure }}
    tls:
      insecure: true
{{ end }}
{{- if $exporter.Headers }}
    headers:
{{- range $i, $header := $exporter.Headers }}
      "{{ $header.Name }}": "{{ $header.Value }}"
{{- end }}
{{- end }}
{{- if $exporter.Encoding }}
    encoding: "{{ $exporter.Encoding }}"
{{- end }}
{{- end }}



service:
  extensions:
  - health_check
  - file_storage/filelogreceiver_offsets
  pipelines:

    traces:
      receivers:
      - otlp
      processors:
      - resourcedetection
      - k8sattributes
      {{- if .ClusterName }}
      - resource/clustername
      {{- end }}
      {{- if .CustomFilters.HasTraceFilters }}
      - filter/traces/custom_telemetry_filter
      {{- end }}
      {{- if .CustomTransforms.HasTraceTransforms }}
      - transform/traces/custom_telemetry_transform
      {{- end }}
      - transform/resources
      - memory_limiter
      - batch
      exporters:
      - routing/traces

    traces/export/_default:
      receivers:
       - routing/traces
      exporters:
      {{- if (or .DevelopmentMode .DebugVerbosityDetailed) }}
      - debug
      {{- end }}
      {{- range $i, $exporter := .ExportersDefault }}
      - {{ $exporter.Name }}
      {{- end }}

    traces/export/routed-namespace:
      receivers:
       - routing/traces
      exporters:
      {{- if (or .DevelopmentMode .DebugVerbosityDetailed) }}
      - debug
      {{- end }}
      {{- range $i, $exporter := .ExportersRouted }}
      - {{ $exporter.Name }}
      {{- end }}

{{- if $hasPrometheusScrapingEnabledForAtLeastOneNamespace }}
    metrics/prometheus:
      receivers:
      - prometheus
      processors:
      - transform/metrics/prometheus_service_attributes
      exporters:
      - forward/metrics/prometheus
{{- end }}

    metrics:
      receivers:
      - otlp
{{- if .KubeletStatsReceiverConfig.Enabled }}
      - kubeletstats
{{- end }}
{{- if .UseHostMetricsReceiver }}
      - hostmetrics
{{- end }}
{{- if $hasPrometheusScrapingEnabledForAtLeastOneNamespace }}
      - forward/metrics/prometheus
{{- end }}
      processors:
      - resourcedetection
      - k8sattributes
      {{- if .ClusterName }}
      - resource/clustername
      {{- end }}
      {{- if .NamespaceOttlFilter }}
      - filter/metrics/only_monitored_namespaces
      {{- end }}
      {{- if .CustomFilters.HasMetricFilters }}
      - filter/metrics/custom_telemetry_filter
      {{- end }}
      {{- if .CustomTransforms.HasMetricTransforms }}
      - transform/metrics/custom_telemetry_transform
      {{- end }}
      - transform/resources
      - memory_limiter
      - batch
      exporters:
      - routing/metrics

    metrics/export/_default:
      receivers:
       - routing/metrics
      exporters:
      {{- if (or .DevelopmentMode .DebugVerbosityDetailed) }}
      - debug
      {{- end }}
      {{- range $i, $exporter := .ExportersDefault }}
      - {{ $exporter.Name }}
      {{- end }}

    metrics/export/routed-namespace:
      receivers:
       - routing/metrics
      exporters:
      {{- if (or .DevelopmentMode .DebugVerbosityDetailed) }}
      - debug
      {{- end }}
      {{- range $i, $exporter := .ExportersRouted }}
      - {{ $exporter.Name }}
      {{- end }}

    logs/otlp:
      receivers:
      - otlp
      processors:
      - k8sattributes
      exporters:
      - forward/logs

{{- if .NamespacesWithLogCollection }}
    logs/filelog:
      receivers:
      - filelog
      processors:
      - k8sattributes
      exporters:
      - forward/logs
{{- end }}

    logs:
      receivers:
      - forward/logs
      processors:
      - resourcedetection
      {{- if .ClusterName }}
      - resource/clustername
      {{- end }}
      {{- if .CustomFilters.HasLogFilters }}
      - filter/logs/custom_telemetry_filter
      {{- end }}
      {{- if .CustomTransforms.HasLogTransforms }}
      - transform/logs/custom_telemetry_transform
      {{- end }}
      - transform/resources
      - memory_limiter
      - batch
      exporters:
      - routing/logs

    logs/export/_default:
      receivers:
       - routing/logs
      exporters:
      {{- if (or .DevelopmentMode .DebugVerbosityDetailed) }}
      - debug
      {{- end }}
      {{- range $i, $exporter := .ExportersDefault }}
      - {{ $exporter.Name }}
      {{- end }}

    logs/export/routed-namespace:
      receivers:
       - routing/logs
      exporters:
      {{- if (or .DevelopmentMode .DebugVerbosityDetailed) }}
      - debug
      {{- end }}
      {{- range $i, $exporter := .ExportersRouted }}
      - {{ $exporter.Name }}
      {{- end }}

  telemetry:
    resource:
      "k8s.cluster.uid": "{{- .PseudoClusterUID }}"
      {{- if .ClusterName }}
      "k8s.cluster.name": "{{- .ClusterName }}"
      {{- end }}
      "k8s.node.name": "${env:K8S_NODE_NAME}"
      "k8s.namespace.name": "${env:DASH0_OPERATOR_NAMESPACE}"
      "k8s.daemonset.uid": "${env:K8S_DAEMONSET_UID}"
      "k8s.daemonset.name": "${env:K8S_DAEMONSET_NAME}"
      "k8s.pod.uid": "${env:K8S_POD_UID}"
      "k8s.pod.name": "${env:K8S_POD_NAME}"
      "k8s.container.name": "opentelemetry-collector"
    metrics:
      readers:
        - pull:
            exporter:
              prometheus:
                host: "{{ .SelfIpReference }}"
                port: 8888
{{- if .SelfMonitoringLogsConfig }}
{{- .SelfMonitoringLogsConfig }}
{{- end }}