custom resource definition should match snapshot:
  1: |
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.14.0
      name: dash0monitorings.operator.dash0.com
    spec:
      group: operator.dash0.com
      names:
        kind: Dash0Monitoring
        listKind: Dash0MonitoringList
        plural: dash0monitorings
        singular: dash0monitoring
      scope: Namespaced
      versions:
        - name: v1alpha1
          schema:
            openAPIV3Schema:
              description: Dash0Monitoring is the schema for the Dash0Monitoring API
              properties:
                apiVersion:
                  description: |-
                    APIVersion defines the versioned schema of this representation of an object.
                    Servers should convert recognized schemas to the latest internal value, and
                    may reject unrecognized values.
                    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                  type: string
                kind:
                  description: |-
                    Kind is a string value representing the REST resource this object represents.
                    Servers may infer this from the endpoint the client submits requests to.
                    Cannot be updated.
                    In CamelCase.
                    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                  type: string
                metadata:
                  type: object
                spec:
                  description: |-
                    Dash0MonitoringSpec describes the details of monitoring a single Kubernetes namespace with Dash0 and sending
                    telemetry to an observability backend.
                  properties:
                    __dash0_internal__normalizedTransform:
                      description: Only used internally, this field must not be specified by users.
                      properties:
                        error_mode:
                          description: |-
                            FilterTransformErrorMode determine how the filter or the transform processor reacts to errors that occur while
                            processing a condition.
                          enum:
                            - ignore
                            - silent
                            - propagate
                          type: string
                        log_statements:
                          items:
                            properties:
                              conditions:
                                items:
                                  type: string
                                type: array
                              context:
                                type: string
                              error_mode:
                                description: |-
                                  FilterTransformErrorMode determine how the filter or the transform processor reacts to errors that occur while
                                  processing a condition.
                                enum:
                                  - ignore
                                  - silent
                                  - propagate
                                type: string
                              statements:
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                        metric_statements:
                          items:
                            properties:
                              conditions:
                                items:
                                  type: string
                                type: array
                              context:
                                type: string
                              error_mode:
                                description: |-
                                  FilterTransformErrorMode determine how the filter or the transform processor reacts to errors that occur while
                                  processing a condition.
                                enum:
                                  - ignore
                                  - silent
                                  - propagate
                                type: string
                              statements:
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                        trace_statements:
                          items:
                            properties:
                              conditions:
                                items:
                                  type: string
                                type: array
                              context:
                                type: string
                              error_mode:
                                description: |-
                                  FilterTransformErrorMode determine how the filter or the transform processor reacts to errors that occur while
                                  processing a condition.
                                enum:
                                  - ignore
                                  - silent
                                  - propagate
                                type: string
                              statements:
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                      type: object
                    export:
                      description: |-
                        The configuration of the observability backend to which telemetry data will be sent. This property is optional.
                        If not set, the operator will use the default export configuration from the cluster-wide
                        Dash0OperatorConfiguration resource, if present. If no Dash0OperatorConfiguration resource has been created for
                        the cluster, or if the Dash0OperatorConfiguration resource does not have at least one export defined, creating a
                        Dash0Monitoring resource without export settings will result in an error.


                        The export can either be Dash0 or another OTLP-compatible backend. You can also combine up to three exporters
                        (i.e. Dash0 plus gRPC plus HTTP). This allows sending the same data to two or three targets simultaneously. When
                        the export setting is present, it has to contain at least one exporter.
                      minProperties: 1
                      properties:
                        dash0:
                          description: The configuration of the Dash0 ingress endpoint to which telemetry data will be sent.
                          properties:
                            apiEndpoint:
                              description: |-
                                The base URL of the Dash0 API to talk to. This is not where telemetry will be sent, but it is used for managing
                                dashboards and check rules via the operator. This property is optional. The value needs to be the API endpoint
                                of your Dash0 organization. The correct API endpoint can be copied fom https://app.dash0.com -> organization
                                settings -> "Endpoints" -> "API". The correct endpoint value will always start with "https://api." and end in
                                ".dash0.com"
                              type: string
                            authorization:
                              description: Mandatory authorization settings for sending data to Dash0.
                              maxProperties: 1
                              minProperties: 1
                              properties:
                                secretRef:
                                  description: |-
                                    A reference to a Kubernetes secret containing the Dash0 authorization token. This property is optional, and is
                                    ignored if the token property is set. The authorization token for your Dash0 organization can be copied from
                                    https://app.dash0.com -> organization settings -> "Auth Tokens".
                                  properties:
                                    key:
                                      default: token
                                      description: The key of the value which contains the Dash0 authorization token. Defaults to "token"
                                      type: string
                                    name:
                                      default: dash0-authorization-secret
                                      description: The name of the secret containing the Dash0 authorization token. Defaults to "dash0-authorization-secret".
                                      type: string
                                  required:
                                    - key
                                    - name
                                  type: object
                                token:
                                  description: |-
                                    The Dash0 authorization token. This property is optional, but either this property or the SecretRef property has
                                    to be provided. If both are provided, the token will be used and SecretRef will be ignored. The authorization
                                    token for your Dash0 organization can be copied from https://app.dash0.com -> organization settings ->
                                    "Auth Tokens".
                                  type: string
                              type: object
                            dataset:
                              default: default
                              description: |-
                                The name of the Dash0 dataset to which telemetry data will be sent. This property is optional. If omitted, the
                                dataset "default" will be used.
                              type: string
                            endpoint:
                              description: |-
                                The URL of the Dash0 ingress endpoint to which telemetry data will be sent. This property is mandatory. The value
                                needs to be the OTLP/gRPC endpoint of your Dash0 organization. The correct OTLP/gRPC endpoint can be copied fom
                                https://app.dash0.com -> organization settings -> "Endpoints". The correct endpoint value will always start with
                                `ingress.` and end in `dash0.com:4317`.
                              minLength: 1
                              type: string
                          required:
                            - authorization
                            - endpoint
                          type: object
                        grpc:
                          description: The settings for an exporter to send telemetry to an arbitrary OTLP-compatible receiver via gRPC.
                          properties:
                            endpoint:
                              description: The URL of the OTLP-compatible receiver to which telemetry data will be sent. This property is mandatory.
                              type: string
                            headers:
                              description: Additional headers to be sent with each gRPC request, for example for authorization. This property is optional.
                              items:
                                properties:
                                  name:
                                    type: string
                                  value:
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                          required:
                            - endpoint
                          type: object
                        http:
                          description: The settings for an exporter to send telemetry to an arbitrary OTLP-compatible receiver via HTTP.
                          properties:
                            encoding:
                              default: proto
                              description: The encoding of the OTLP data when sent via HTTP. Can be either proto or json, defaults to proto.
                              enum:
                                - proto
                                - json
                              type: string
                            endpoint:
                              description: The URL of the OTLP-compatible receiver to which telemetry data will be sent. This property is mandatory.
                              type: string
                            headers:
                              description: Additional headers to be sent with each HTTP request, for example for authorization. This property is optional.
                              items:
                                properties:
                                  name:
                                    type: string
                                  value:
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                          required:
                            - endpoint
                          type: object
                      type: object
                    filter:
                      description: |-
                        Optional filters for telemetry data that is collected in this namespace. This can be used to drop entire spans,
                        span events, metrics, metric data points, or log records. See "Transform" for advanced transformations (e.g.
                        removing span attributes, metric data point attributes, log record attributes etc.). This setting is optional,
                        by default, no filters are applied. It is a validation error to set `telemetryCollection.enabled=false` in the
                        operator configuration resource and set filters in any monitoring resource at the same time.
                      properties:
                        error_mode:
                          default: ignore
                          description: |-
                            An optional field which will determine how the filter processor reacts to errors that occur while processing a
                            condition. Possible values:
                            - ignore: ignore errors returned by conditions, log them, continue with to the next condition.
                                      This is the recommended mode and also the default mode if this property is omitted.
                            - silent: ignore errors returned by conditions, do not log them, continue with to the next condition.
                            - propagate: return the error up the processing pipeline. This will result in the payload being dropped from the
                                      collector. Not recommended.


                            This is optional, default to "ignore", there is usually no reason to change this.


                            Note that although this can be specified per namespace, the filter conditions will be aggregated into one
                            single filter processor in the resulting OpenTelemetry collector configuration; if different error modes are
                            specified in different namespaces, the "most severe" error mode will be used (propagate > ignore > silent).
                          enum:
                            - ignore
                            - silent
                            - propagate
                          type: string
                        logs:
                          description: |-
                            Filters for the logs signal.
                            This can be used to drop _log records_.
                          properties:
                            log_records:
                              description: |-
                                A list of conditions for filtering log records.
                                This is a list of OTTL conditions.
                                All log records where at least one condition evaluates to true will be dropped.
                                (That is, the conditions are implicitly connected by a logical OR.)
                                Example:
                                - 'IsMatch(body, ".*password.*")'
                                - 'severity_number < SEVERITY_NUMBER_WARN'
                              items:
                                type: string
                              type: array
                          type: object
                        metrics:
                          description: |-
                            Filters for the metrics signal.
                            This can be used to drop entire _metrics_, or individual _data points_.
                          properties:
                            datapoint:
                              description: |-
                                A list of conditions for filtering metrics data points.
                                This is a list of OTTL conditions.
                                All data points where at least one condition evaluates to true will be dropped.
                                (That is, the conditions are implicitly connected by a logical OR.)
                                Note: If all datapoints for a metric are dropped, the metric will also be dropped.
                                Example:
                                - 'metric.name == "a.noisy.metric.with.many.datapoints" and value_int == 0' # filter metrics by value
                                - 'resource.attributes["service.name"] == "my_service_name"' # filter data points by resource attributes
                              items:
                                type: string
                              type: array
                            metric:
                              description: |-
                                A list of conditions for filtering metrics.
                                This is a list of OTTL conditions.
                                All metrics where at least one condition evaluates to true will be dropped.
                                (That is, the conditions are implicitly connected by a logical OR.)
                                Example:
                                - 'name == "k8s.replicaset.available"'
                                - 'name == "k8s.replicaset.desired"'
                                - 'type == METRIC_DATA_TYPE_HISTOGRAM'
                              items:
                                type: string
                              type: array
                          type: object
                        traces:
                          description: |-
                            Filters for the traces signal.
                            This can be used to drop _spans_ or _span events_.
                          properties:
                            span:
                              description: |-
                                A list of conditions for filtering spans.
                                This is a list of OTTL conditions.
                                All spans where at least one condition evaluates to true will be dropped.
                                (That is, the conditions are implicitly connected by a logical OR.)
                                Example:
                                - 'attributes["http.route"] == "/ready"'
                                - 'attributes["http.route"] == "/metrics"'
                              items:
                                type: string
                              type: array
                            spanevent:
                              description: |-
                                A list of conditions for filtering span events.
                                This is a list of OTTL conditions.
                                All span events where at least one condition evaluates to true will be dropped.
                                (That is, the conditions are implicitly connected by a logical OR.)
                                If all span events for a span are dropped, the span will be left intact.
                              items:
                                type: string
                              type: array
                          type: object
                      type: object
                    instrumentWorkloads:
                      description: |-
                        Settings for automatic instrumentation of workloads in the target namespace. This setting is optional, by default
                        the operator will instrument existing workloads, as well as new workloads at deploy time and changed workloads
                        when they are updated.
                      properties:
                        mode:
                          description: |-
                            Opt-out for automatic workload instrumentation for the target namespace. There are three possible settings:
                            `all`, `created-and-updated` and `none`. By default, the setting `all` is assumed, unless there is an operator
                            configuration resource with `telemetryCollection.enabled=false`, then the setting `none` is assumed.


                            If set to `all`, the operator will:
                            * automatically instrument existing workloads in the target namespace (i.e. workloads already running in the
                              namespace) when the Dash0 monitoring resource is deployed,
                            * instrument existing workloads or update the instrumentation of already instrumented workloads in the target
                              namespace when the Dash0 operator is first started or restarted (for example when updating the operator),
                            * instrument new workloads in the target namespace when they are deployed, and
                            * instrument changed workloads in the target namespace when changes are applied to them.
                            Note that the first two actions (instrumenting existing workloads) will result in restarting the pods of the
                            affected workloads.


                            If set to `created-and-updated`, the operator will not instrument existing workloads in the target namespace.
                            Instead, it will only:
                            * instrument new workloads in the target namespace when they are deployed, and
                            * instrument changed workloads in the target namespace when changes are applied to them.
                            This setting is useful if you want to avoid pod restarts as a side effect of deploying the Dash0 monitoring
                            resource or restarting the Dash0 operator.


                            You can opt out of automatically instrumenting workloads entirely by setting this option to `none`. With
                            `mode: none`, workloads in the target namespace will never be instrumented to send telemetry to Dash0.


                            If this setting is omitted, the value `all` is assumed and new, updated as well as existing Kubernetes workloads
                            will be automatically intrumented by the operator to send telemetry to Dash0, as described above. There is one
                            exception to this rule: If there is an operator configuration resource with `telemetryCollection.enabled=false`,
                            then the default setting is `none` instead of `all`, and no workloads will be instrumented by the Dash0 operator.


                            It is a validation error to set `telemetryCollection.enabled=false` in the operator configuration resource and
                            `mode: all` or `mode: created-and-updated` in any monitoring resource at the
                            same time.


                            More fine-grained per-workload control over instrumentation is available by setting the label
                            dash0.com/enable=false on individual workloads.
                          enum:
                            - all
                            - created-and-updated
                            - none
                          type: string
                      type: object
                    logCollection:
                      description: |-
                        Settings for log collection in the target namespace. This setting is optional, by default the operator will
                        collect pod logs in the target namespace; unless there is an operator configuration resource with
                        `telemetryCollection.enabled=false`, then log collection is off by default. It is a validation error to set
                        `telemetryCollection.enabled=false` in the operator configuration resource and `logCollection.enabled=true` in any
                        monitoring resource at the same time.
                      properties:
                        enabled:
                          description: |-
                            Opt-out for log collection for the target namespace. If set to `false`, the operator will not collect pod logs
                            in the target namespace and send the resulting log records to Dash0.


                            This setting is optional, it defaults to `true`, that is, if this setting is omitted, the value `true` is assumed
                            and the operator will collect pod logs in the target namespace; unless there is an operator configuration
                            resource with `telemetryCollection.enabled=false`, then log collection is off by default. It is a validation error
                            to set `telemetryCollection.enabled=false` in the operator configuration resource and
                            `logCollection.enabled=true` in any monitoring resource at the same time.
                          type: boolean
                      type: object
                    prometheusScraping:
                      description: |-
                        Settings for scraping Prometheus metrics from pods in the target namespace according to their
                        prometheus.io/scrape annotations. This setting is optional, by default the operator will scrape metrics from pods
                        with these notations in the target namespace; unless there is an operator configuration resource with
                        `telemetryCollection.enabled=false`, then Prometheus scraping is off by default. It is a validation error to set
                        `telemetryCollection.enabled=false` in the operator configuration resource and `prometheusScraping.enabled=true`
                        in any monitoring resource at the same time.
                      properties:
                        enabled:
                          description: |-
                            If enabled, the operator will configure its OpenTelemetry collector to scrape metrics from pods in the namespace
                            of this Dash0Monitoring resource according to their prometheus.io/scrape annotations via the OpenTelemetry
                            Prometheus receiver. This setting is optional, it defaults to `true`; unless there is an operator configuration
                            resource with `telemetryCollection.enabled=false`, then Prometheus scraping is off by default. It is a validation
                            error to set `telemetryCollection.enabled=false` in the operator configuration resource and
                            `prometheusScraping.enabled=true` in any monitoring resource at the same time.
                          type: boolean
                      type: object
                    prometheusScrapingEnabled:
                      description: |-
                        Deprecated: This setting is deprecated. Please use
                            prometheusScraping:
                              enabled: false
                        instead of
                            prometheusScrapingEnabled: false


                        If enabled, the operator will configure its OpenTelemetry collector to scrape metrics from pods in the namespace
                        of this Dash0Monitoring resource according to their prometheus.io/scrape annotations via the OpenTelemetry
                        Prometheus receiver. This setting is optional, it defaults to `true`; unless there is an operator configuration
                        resource with `telemetryCollection.enabled=false`, then it defaults to `false`. It is a validation error to set
                        `telemetryCollection.enabled=false` in the operator configuration resource and `prometheusScrapingEnabled=true`
                        in any monitoring resource at the same time.
                      type: boolean
                    synchronizePersesDashboards:
                      default: true
                      description: |-
                        If enabled, the operator will watch Perses dashboard resources in this namespace and create corresponding
                        dashboards in Dash0 via the Dash0 API.
                        See https://github.com/dash0hq/dash0-operator/blob/main/helm-chart/dash0-operator/README.md#managing-dash0-dashboards-with-the-operator
                        for details. This setting is optional, it defaults to `true`.
                      type: boolean
                    synchronizePrometheusRules:
                      default: true
                      description: |-
                        If enabled, the operator will watch Prometheus rule resources in this namespace and create corresponding check
                        rules in Dash0 via the Dash0 API.
                        See https://github.com/dash0hq/dash0-operator/blob/main/helm-chart/dash0-operator/README.md#managing-dash0-check-rules-with-the-operator
                        for details. This setting is optional, it defaults to `true`.
                      type: boolean
                    transform:
                      description: |-
                        Optional custom transformations for telemetry data that is collected in this namespace. This can be used to
                        remove span attributes, metric data point attributes, log record attributes etc. See "Filter" for basic filters
                        that can be used to drop entire spans, span events, metrics, metric data points, or log records.


                        For each signal type (traces, metrics, logs), a list of OTTL statements can be defined. These will be applied to
                        the telemetry collected in the namespace, following the order specified in the configuration. Each statement can
                        access and transform telemetry using OTTL functions.
                        See https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
                        for details and examples. Note that this configuration currently supports the
                        [basic config style](https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/transformprocessor/README.md#basic-config)
                        of the transform processor. The
                        [advanced config style](https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/transformprocessor/README.md#advanced-config)
                        is not supported.


                        This setting is optional, by default, no transformations are applied. It is a validation error to set
                        `telemetryCollection.enabled=false` in the operator configuration resource and set transforms in any monitoring
                        resource at the same time.
                      properties:
                        error_mode:
                          default: ignore
                          description: |-
                            An optional field which will determine how the transform processor reacts to errors that occur while processing a
                            statement. Possible values:
                            - ignore: ignore errors returned by statements, log them, continue with to the next statement.
                            - silent: ignore errors returned by statements, do not log them, continue with to the next statement.
                            - propagate: return the error up the processing pipeline. This will result in the payload being dropped from the
                              collector.


                            This is optional, default to "ignore".


                            Note that although this can be specified per namespace, the transform statements will be aggregated into one
                            single transform processor in the resulting OpenTelemetry collector configuration; if different error modes are
                            specified in different namespaces, the "most severe" error mode will be used (propagate > ignore > silent).
                          enum:
                            - ignore
                            - silent
                            - propagate
                          type: string
                        log_statements:
                          description: Transform statements (or groups) for the log signal type.
                          x-kubernetes-preserve-unknown-fields: true
                        metric_statements:
                          description: Transform statements (or groups) for the metric signal type.
                          x-kubernetes-preserve-unknown-fields: true
                        trace_statements:
                          description: Transform statements (or groups) for the trace signal type.
                          x-kubernetes-preserve-unknown-fields: true
                      type: object
                  type: object
                status:
                  description: Dash0MonitoringStatus defines the observed state of the Dash0Monitoring monitoring resource.
                  properties:
                    conditions:
                      items:
                        description: Condition contains details for one aspect of the current state of this resource.
                        properties:
                          lastTransitionTime:
                            description: |-
                              lastTransitionTime is the last time the condition transitioned from one status to another.
                              This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                            format: date-time
                            type: string
                          message:
                            description: |-
                              message is a human readable message indicating details about the transition.
                              This may be an empty string.
                            maxLength: 32768
                            type: string
                          observedGeneration:
                            description: |-
                              observedGeneration represents the .metadata.generation that the condition was set based upon.
                              For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                              with respect to the current state of the instance.
                            format: int64
                            minimum: 0
                            type: integer
                          reason:
                            description: |-
                              reason contains a programmatic identifier indicating the reason for the condition's last transition.
                              Producers of specific condition types may define expected values and meanings for this field,
                              and whether the values are considered a guaranteed API.
                              The value should be a CamelCase string.
                              This field may not be empty.
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: status of the condition, one of True, False, Unknown.
                            enum:
                              - "True"
                              - "False"
                              - Unknown
                            type: string
                          type:
                            description: |-
                              type of condition in CamelCase or in foo.example.com/CamelCase.
                              ---
                              Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                              useful (see .node.status.conditions), the ability to deconflict is important.
                              The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                        type: object
                      type: array
                    persesDashboardSynchronizationResults:
                      additionalProperties:
                        properties:
                          synchronizationError:
                            type: string
                          synchronizationStatus:
                            description: |-
                              SynchronizationStatus describes the result of synchronizing a third-party Kubernetes resource (Perses
                              dashboard, Prometheus rule) to the Dash0 API.
                            enum:
                              - successful
                              - partially-successful
                              - failed
                            type: string
                          synchronizedAt:
                            format: date-time
                            type: string
                          validationIssues:
                            items:
                              type: string
                            type: array
                        required:
                          - synchronizationStatus
                          - synchronizedAt
                        type: object
                      description: Shows results of synchronizing Perses dashboard resources in this namespace via the Dash0 API.
                      type: object
                    previousInstrumentWorkloads:
                      description: The spec.instrumentWorkloads.mode setting that has been observed in the previous reconcile cycle.
                      enum:
                        - all
                        - created-and-updated
                        - none
                      type: string
                    prometheusRuleSynchronizationResults:
                      additionalProperties:
                        properties:
                          alertingRulesTotal:
                            type: integer
                          invalidRules:
                            additionalProperties:
                              items:
                                type: string
                              type: array
                            type: object
                          invalidRulesTotal:
                            type: integer
                          synchronizationErrors:
                            additionalProperties:
                              type: string
                            type: object
                          synchronizationErrorsTotal:
                            type: integer
                          synchronizationStatus:
                            description: |-
                              SynchronizationStatus describes the result of synchronizing a third-party Kubernetes resource (Perses
                              dashboard, Prometheus rule) to the Dash0 API.
                            enum:
                              - successful
                              - partially-successful
                              - failed
                            type: string
                          synchronizedAt:
                            format: date-time
                            type: string
                          synchronizedRules:
                            items:
                              type: string
                            type: array
                          synchronizedRulesTotal:
                            type: integer
                        required:
                          - alertingRulesTotal
                          - invalidRulesTotal
                          - synchronizationErrorsTotal
                          - synchronizationStatus
                          - synchronizedAt
                          - synchronizedRulesTotal
                        type: object
                      description: Shows results of synchronizing Prometheus rule resources in this namespace via the Dash0 API.
                      type: object
                  type: object
              type: object
          served: true
          storage: true
          subresources:
            status: {}
