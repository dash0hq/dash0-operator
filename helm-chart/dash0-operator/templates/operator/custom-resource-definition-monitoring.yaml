---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: dash0monitorings.operator.dash0.com
spec:
  group: operator.dash0.com
  names:
    kind: Dash0Monitoring
    listKind: Dash0MonitoringList
    plural: dash0monitorings
    singular: dash0monitoring
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Dash0Monitoring is the schema for the Dash0Monitoring API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              Dash0MonitoringSpec describes the details of monitoring a single Kubernetes namespace with Dash0 and sending
              telemetry to an observability backend.
            properties:
              export:
                description: |-
                  The configuration of the observability backend to which telemetry data will be sent. This property is optional.
                  If not set, the operator will use the default export configuration from the cluster-wide
                  Dash0OperatorConfiguration resource, if present. If no Dash0OperatorConfiguration resource has been created for
                  the cluster, or if the Dash0OperatorConfiguration resource does not have at least one export defined, creating a
                  Dash0Monitoring resource without export settings will result in an error.


                  The export can either be Dash0 or another OTLP-compatible backend. You can also combine up to three exporters
                  (i.e. Dash0 plus gRPC plus HTTP). This allows sending the same data to two or three targets simultaneously. When
                  the export setting is present, it has to contain at least one exporter.
                minProperties: 1
                properties:
                  dash0:
                    description: The configuration of the Dash0 ingress endpoint to
                      which telemetry data will be sent.
                    properties:
                      apiEndpoint:
                        description: |-
                          The base URL of the Dash0 API to talk to. This is not where telemetry will be sent, but it is used for managing
                          dashboards and check rules via the operator. This property is optional. The value needs to be the API endpoint
                          of your Dash0 organization. The correct API endpoint can be copied fom https://app.dash0.com -> organization
                          settings -> "Endpoints" -> "API". The correct endpoint value will always start with "https://api." and end in
                          ".dash0.com"
                        type: string
                      authorization:
                        description: Mandatory authorization settings for sending
                          data to Dash0.
                        maxProperties: 1
                        minProperties: 1
                        properties:
                          secretRef:
                            description: |-
                              A reference to a Kubernetes secret containing the Dash0 authorization token. This property is optional, and is
                              ignored if the token property is set. The authorization token for your Dash0 organization can be copied from
                              https://app.dash0.com -> organization settings -> "Auth Tokens".
                            properties:
                              key:
                                default: token
                                description: The key of the value which contains the
                                  Dash0 authorization token. Defaults to "token"
                                type: string
                              name:
                                default: dash0-authorization-secret
                                description: The name of the secret containing the
                                  Dash0 authorization token. Defaults to "dash0-authorization-secret".
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          token:
                            description: |-
                              The Dash0 authorization token. This property is optional, but either this property or the SecretRef property has
                              to be provided. If both are provided, the token will be used and SecretRef will be ignored. The authorization
                              token for your Dash0 organization can be copied from https://app.dash0.com -> organization settings ->
                              "Auth Tokens".
                            type: string
                        type: object
                      dataset:
                        default: default
                        description: |-
                          The name of the Dash0 dataset to which telemetry data will be sent. This property is optional. If omitted, the
                          dataset "default" will be used.
                        type: string
                      endpoint:
                        description: |-
                          The URL of the Dash0 ingress endpoint to which telemetry data will be sent. This property is mandatory. The value
                          needs to be the OTLP/gRPC endpoint of your Dash0 organization. The correct OTLP/gRPC endpoint can be copied fom
                          https://app.dash0.com -> organization settings -> "Endpoints". The correct endpoint value will always start with
                          `ingress.` and end in `dash0.com:4317`.
                        type: string
                    required:
                    - authorization
                    - endpoint
                    type: object
                  grpc:
                    description: The settings for an exporter to send telemetry to
                      an arbitrary OTLP-compatible receiver via gRPC.
                    properties:
                      endpoint:
                        description: The URL of the OTLP-compatible receiver to which
                          telemetry data will be sent. This property is mandatory.
                        type: string
                      headers:
                        description: Additional headers to be sent with each gRPC
                          request, for example for authorization. This property is
                          optional.
                        items:
                          properties:
                            name:
                              type: string
                            value:
                              type: string
                          required:
                          - name
                          - value
                          type: object
                        type: array
                    required:
                    - endpoint
                    type: object
                  http:
                    description: The settings for an exporter to send telemetry to
                      an arbitrary OTLP-compatible receiver via HTTP.
                    properties:
                      encoding:
                        default: proto
                        description: The encoding of the OTLP data when sent via HTTP.
                          Can be either proto or json, defaults to proto.
                        enum:
                        - proto
                        - json
                        type: string
                      endpoint:
                        description: The URL of the OTLP-compatible receiver to which
                          telemetry data will be sent. This property is mandatory.
                        type: string
                      headers:
                        description: Additional headers to be sent with each HTTP
                          request, for example for authorization. This property is
                          optional.
                        items:
                          properties:
                            name:
                              type: string
                            value:
                              type: string
                          required:
                          - name
                          - value
                          type: object
                        type: array
                    required:
                    - endpoint
                    type: object
                type: object
              instrumentWorkloads:
                default: all
                description: |-
                  Global opt-out for workload instrumentation for the target namespace. There are three possible settings: `all`,
                  `created-and-updated` and `none`. By default, the setting `all` is assumed.


                  If set to `all` (or omitted), the operator will:
                  * instrument existing workloads in the target namespace (i.e. workloads already running in the namespace) when
                    the Dash0 monitoring resource is deployed,
                  * instrument existing workloads or update the instrumentation of already instrumented workloads in the target
                    namespace when the Dash0 Kubernetes operator is first started or restarted (for example when updating the
                    operator),
                  * instrument new workloads in the target namespace when they are deployed, and
                  * instrument changed workloads in the target namespace when changes are applied to them.
                  Note that the first two actions (instrumenting existing workloads) will result in restarting the pods of the
                  affected workloads.


                  If set to `created-and-updated`, the operator will not instrument existing workloads in the target namespace.
                  Instead, it will only:
                  * instrument new workloads in the target namespace when they are deployed, and
                  * instrument changed workloads in the target namespace when changes are applied to them.
                  This setting is useful if you want to avoid pod restarts as a side effect of deploying the Dash0 monitoring
                  resource or restarting the Dash0 Kubernetes operator.


                  You can opt out of instrumenting workloads entirely by setting this option to `none`. With
                  `instrumentWorkloads: none`, workloads in the target namespace will never be instrumented to send telemetry to
                  Dash0.


                  If this setting is omitted, the value `all` is assumed and new/updated as well as existing Kubernetes workloads
                  will be intrumented by the operator to send telemetry to Dash0, as described above.


                  More fine-grained per-workload control over instrumentation is available by setting the label
                  dash0.com/enable=false on individual workloads.
                enum:
                - all
                - created-and-updated
                - none
                type: string
            type: object
          status:
            description: Dash0MonitoringStatus defines the observed state of the Dash0Monitoring
              monitoring resource.
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current state of this resource."
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              previousInstrumentWorkloads:
                description: The spec.instrumentWorkloads setting that has been observed
                  in the previous reconcile cycle.
                enum:
                - all
                - created-and-updated
                - none
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}